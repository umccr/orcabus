import { VpcLookupOptions } from 'aws-cdk-lib/aws-ec2';
import path from 'path';

export enum AppStage {
  BETA = 'beta',
  GAMMA = 'gamma',
  PROD = 'prod',
}

export const region = 'ap-southeast-2';

/**
 * accountIdAlias: mapping from AccountName to AWS Account ID.
 */
export const accountIdAlias: Record<AppStage, string> = {
  [AppStage.BETA]: '843407916570', // umccr_development
  [AppStage.GAMMA]: '455634345446', // umccr_staging
  [AppStage.PROD]: '472057503814', // umccr_production
};

// external ICA constants
export const icaAwsAccountNumber = '079623148045';

// Name of the Ica Event Pipe stack
export const icaEventPipeStackName = 'IcaEventPipeStack';

// upstream infra: vpc
const vpcName = 'main-vpc';
const vpcStackName = 'networking';
export const vpcProps: VpcLookupOptions = {
  vpcName: vpcName,
  tags: {
    Stack: vpcStackName,
  },
};

// upstream infra: cognito
export const cognitoUserPoolIdParameterName = '/data_portal/client/cog_user_pool_id';
export const cognitoPortalAppClientIdParameterName =
  '/data_portal/client/data2/cog_app_client_id_stage';
export const cognitoStatusPageAppClientIdParameterName =
  '/data_portal/status_page/cog_app_client_id_stage';
export const cognitoApiGatewayProps = {
  cognitoUserPoolIdParameterName: cognitoUserPoolIdParameterName,
  cognitoPortalAppClientIdParameterName: cognitoPortalAppClientIdParameterName,
  cognitoStatusPageAppClientIdParameterName: cognitoStatusPageAppClientIdParameterName,
};

export const oncoanalyserBucket: Record<AppStage, string> = {
  [AppStage.BETA]: 'umccr-temp-dev',
  [AppStage.GAMMA]: 'umccr-temp-stg',
  [AppStage.PROD]: 'org.umccr.data.oncoanalyser',
};

export const icav2PipelineCacheBucket: Record<AppStage, string> = {
  [AppStage.BETA]: 'pipeline-dev-cache-503977275616-ap-southeast-2',
  [AppStage.GAMMA]: 'pipeline-stg-cache-503977275616-ap-southeast-2',
  [AppStage.PROD]: 'pipeline-prod-cache-503977275616-ap-southeast-2',
};

export const gdsBsRunsUploadLogPath: Record<AppStage, string> = {
  [AppStage.BETA]: 'gds://development/primary_data/temp/bs_runs_upload_tes/',
  [AppStage.GAMMA]: 'gds://staging/primary_data/temp/bs_runs_upload_tes/',
  [AppStage.PROD]: 'gds://production/primary_data/temp/bs_runs_upload_tes/',
};

/**
 * Validate the secret name so that it doesn't end with 6 characters and a hyphen.
 *
 */
export const validateSecretName = (secretName: string) => {
  // Note, this should not end with a hyphen and 6 characters, otherwise secrets manager won't be
  // able to find the secret using a partial ARN.
  if (/-(.){6}$/.test(secretName)) {
    throw new Error('the secret name should not end with a hyphen and 6 characters');
  }
};

/**
 * Configuration for resources created in SharedStack
 */
// Db Construct
export const computeSecurityGroupName = 'OrcaBusSharedComputeSecurityGroup';
export const dbClusterIdentifier = 'orcabus-db';
export const dbClusterResourceIdParameterName = '/orcabus/db-cluster-resource-id';
export const dbClusterEndpointHostParameterName = '/orcabus/db-cluster-endpoint-host';
export const databasePort = 5432;

export const rdsMasterSecretName = 'orcabus/master-rds'; // pragma: allowlist secret
validateSecretName(rdsMasterSecretName);

// Other constants that exist in the SharedStack
export const eventSchemaRegistryName = 'orcabus.events';
export const dataSchemaRegistryName = 'orcabus.data';
export const eventBusName = 'OrcaBusMain';
export const eventSourceQueueName = 'orcabus-event-source-queue';

/**
 * Configuration for resources created in TokenServiceStack
 */

export const serviceUserSecretName = 'orcabus/token-service-user'; // pragma: allowlist secret
export const jwtSecretName = 'orcabus/token-service-jwt'; // pragma: allowlist secret
export const icaAccessTokenSecretName = 'IcaSecretsPortal'; // pragma: allowlist secret

export const fileManagerIngestRoleName = 'orcabus-file-manager-ingest-role';

/*
Resources required for BaseSpace TES stack
 */

export const basespaceAccessTokenSecretName = '/manual/BaseSpaceAccessTokenSecret'; // pragma: allowlist secret
export const ssCheckApiDomainSsmParameterName = '/sscheck/lambda-api-domain';

/*
ICAv2 Resources - required by various stacks
 */
export const icav2AccessTokenSecretName: Record<AppStage, string> = {
  [AppStage.BETA]: 'ICAv2JWTKey-umccr-prod-service-dev', // pragma: allowlist secret
  [AppStage.GAMMA]: 'ICAv2JWTKey-umccr-prod-service-staging', // pragma: allowlist secret
  [AppStage.PROD]: 'ICAv2JWTKey-umccr-prod-service-production', // pragma: allowlist secret
};

/*
Resources generated by the BSSH Fastq Copy Manager
*/

export const bsshFastqCopyManagerWorkflowName = 'bsshFastqCopy';
export const bsshFastqCopyManagerWorkflowTypeVersion = '1.0.0';
export const bsshFastqCopyManagerServiceVersion = '2024.07.01';

export const bsshFastqCopyManagerReadyEventSource = 'orcabus.workflowmanager';
export const bsshFastqCopyManagerEventSource = 'orcabus.bsshfastqcopymanager';
export const bsshFastqCopyManagerEventDetailType = 'WorkflowRunStateChange';

/*
Resources generated by the BCLConvert InterOp QC pipeline
*/

export const bclConvertInteropQcSSMRoot = '/orcabus/bclconvert_interop_qc';

export const bclconvertInteropQcIcav2PipelineManagerDynamodbTableName =
  'bclconvertInteropQcICAv2AnalysesDynamoDBTable';

// Stateful
export const bclconvertInteropQcDynamoDbTableSSMName = path.join(
  bclConvertInteropQcSSMRoot,
  'dynamodb_table_name'
);
export const bclconvertInteropQcDynamoDbTableSSMArn = path.join(
  bclConvertInteropQcSSMRoot,
  'dynamodb_table_arn'
);

// Stateless

export const bclconvertInteropQcIcav2PipelineWorkflowName = 'bclconvert-interop-qc';
export const bclconvertInteropQcIcav2PipelineWorkflowTypeVersion = '1.3.1--1.21';
export const bclconvertInteropQcIcav2ServiceVersion = '2024.07.01';

export const bclconvertInteropQcIcav2ReadyEventSource = 'orcabus.workflowmanager';
export const bclconvertInteropQcIcav2EventSource = 'orcabus.bclconvertinteropqc';
export const bclconvertInteropQcIcav2EventDetailType = 'WorkflowRunStateChange';
export const bclconvertInteropQcStateMachinePrefix = 'bclconvertInteropQcSfn';

/*
Resources used by the bclConvert InteropQc Pipeline
*/

// Release can be found here: https://github.com/umccr/cwl-ica/releases/tag/bclconvert-interop-qc%2F1.3.1--1.21__20240627051309
// Pipeline ID is: 35cae57c-8895-4814-ae89-db4b5e9668b2
export const bclconvertInteropQcIcav2PipelineIdSSMParameterPath =
  '/icav2/umccr-prod/bclconvert_interop_qc_pipeline_id';

/*
Resources generated by the ctTSO v2 Stack
*/
export const cttsov2Icav2PipelineManagerSSMRoot = '/orcabus/ctTSOv2';

// Stateful
export const cttsov2Icav2PipelineManagerDynamodbTableName = 'ctTSOv2ICAv2AnalysesDynamoDBTable';
export const cttsov2DynamoDbTableSSMName = path.join(
  cttsov2Icav2PipelineManagerSSMRoot,
  'dynamodb_table_name'
);
export const cttsov2DynamoDbTableSSMArn = path.join(
  cttsov2Icav2PipelineManagerSSMRoot,
  'dynamodb_table_arn'
);

// Event Handling

export const cttsov2Icav2PipelineWorkflowType = 'cttsov2';
export const cttsov2Icav2PipelineWorkflowTypeVersion = '2.6.0';
export const cttsov2Icav2ServiceVersion = '2024.07.01';

export const cttsov2Icav2ReadyEventSource = 'orcabus.workflowmanager';
export const cttsov2Icav2EventSource = 'orcabus.cttsov2';
export const cttsov2Icav2EventDetailType = 'WorkflowRunStateChange';
export const cttsov2StateMachinePrefix = 'cttsov2Sfn';

/*
External resources required by the ctTSO v2 Stack
*/
export const cttsov2Icav2PipelineIdSSMParameterPath =
  '/icav2/umccr-prod/tso500_ctdna_2.6_pipeline_id';

/*
Resources generated by the WGTS QC Stateful Stack
*/
export const wgtsQcIcav2PipelineManagerSSMRoot = '/orcabus/wgtsQc';

// Stateful
export const wgtsQcIcav2PipelineManagerDynamodbTableName = 'wgtsQcICAv2AnalysesDynamoDBTable';
export const wgtsQcDynamoDbTableSSMName = path.join(
  wgtsQcIcav2PipelineManagerSSMRoot,
  'dynamodb_table_name'
);
export const wgtsQcDynamoDbTableSSMArn = path.join(
  wgtsQcIcav2PipelineManagerSSMRoot,
  'dynamodb_table_arn'
);

/*
External resources required by all dragen stacks on ICAv2
*/

// FIXME deploy to stg/prod
// '
//   [
//     {
//       "name": "v9-r3",
//       "uri": "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/dragen-hash-tables/v9-r3/hg38-alt_masked-cnv-hla-rna/hg38-alt_masked.cnv.hla.rna-9-r3.0-1.tar.gz"
//     }
//   ]
// '
export const dragenIcav2ReferenceUriMappingSSMParameterPath =
  '/icav2/umccr-prod/dragen_reference_mapping';

// FIXME deploy to stg/prod
// '
//   [
//     {
//       "name": "v39",
//       "uri": "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/gencode/hg38/v39/gencode.v39.annotation.gtf"
//     }
//   ]
// '
export const icav2GencodeAnnotationUriMappingSSMParameterPath =
  '/icav2/umccr-prod/wts_qc_annotation_mapping';

// FIXME deploy to stg/prod
// '
//   [
//     {
//       "name": "hg38",
//       "uri": "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/genomes/hg38/hg38.fa"
//     }
//   ]
// '
export const icav2FastaReferenceUriMappingSSMParameterPath =
  '/icav2/umccr-prod/fasta_reference_mapping'; //

/*
External resources required by the wgtsqc Stack
*/

// FIXME deploy to stg/prod
export const wgtsQcIcav2PipelineIdSSMParameterPath = '/icav2/umccr-prod/wgts_qc_4.2.4_pipeline_id'; // 71f094dc-0cf8-4fcf-890c-9f3edf00ee20

export const wgtsQcIcav2PipelineWorkflowType = 'wgtsQc';
export const wgtsQcIcav2PipelineWorkflowTypeVersion = '4.2.4';
export const wgtsQcIcav2ServiceVersion = '2024.07.01';

export const wgtsQcIcav2ReadyEventSource = 'orcabus.workflowmanager';
export const wgtsQcIcav2EventSource = 'orcabus.wgtsqc';
export const wgtsQcIcav2EventDetailType = 'WorkflowRunStateChange';
export const wgtsQcStateMachinePrefix = 'wgtsQcSfn';

export const wgtsQcDefaultReferenceVersion = 'v9-r3';
export const wgtsQcDefaultAnnotationVersion = 'v39';

// Tumor Normal pipeline

/*
Resources generated by the Tn Stateful Stack
*/
export const tnIcav2PipelineManagerSSMRoot = '/orcabus/tumor_normal';

// Stateful
export const tnIcav2PipelineManagerDynamodbTableName = 'tnICAv2AnalysesDynamoDBTable';
export const tnDynamoDbTableSSMName = path.join(
  tnIcav2PipelineManagerSSMRoot,
  'dynamodb_table_name'
);
export const tnDynamoDbTableSSMArn = path.join(tnIcav2PipelineManagerSSMRoot, 'dynamodb_table_arn');

/*
TN Stateless stack
*/

// FIXME deploy to stg/prod
export const tnIcav2PipelineIdSSMParameterPath = '/icav2/umccr-prod/tumor_normal_4.2.4_pipeline_id'; // fe6df931-4a30-4fa7-8d05-31e00367d216
export const tnIcav2PipelineWorkflowType = 'tumor_normal';
export const tnIcav2PipelineWorkflowTypeVersion = '4.2.4';
export const tnIcav2ServiceVersion = '2024.07.01';
export const tnIcav2ReadyEventSource = 'orcabus.workflowmanager';
export const tnIcav2EventSource = 'orcabus.tumornormal';
export const tnIcav2EventDetailType = 'WorkflowRunStateChange';
export const tnStateMachinePrefix = 'tnSfn';
export const tnDefaultReferenceVersion = 'v9-r3';

// WTS pipeline

/*
Resources required by the WTS Stateful Stack
*/

// FIXME deploy to stg/prod
// '[
//     {
//         "name": "2.4.0",
//         "blacklist_uri": "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/arriba/2-4-0/blacklist_hg38_GRCh38_v2.4.0.tsv.gz",
//         "cytobands_uri": "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/arriba/2-4-0/cytobands_hg38_GRCh38_v2.4.0.tsv",
//         "protein_domains_uri": "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/arriba/2-4-0/protein_domains_hg38_GRCh38_v2.4.0.gff3"
//     }
//  ]'
export const icav2ArribaUriMappingSSMParameterPath = '/icav2/umccr-prod/arriba_mapping';

// FIXME deploy to stg/prod
// '[
//    {
//        "name": "2023-07-21--4.2.4",
//        "qc_reference_samples_json":  [
//          "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/dragen-wts-multiqc/2023-07-21--4-2-4/SBJ01563/"
//          "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/dragen-wts-multiqc/2023-07-21--4-2-4/SBJ01147/",
//          "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/dragen-wts-multiqc/2023-07-21--4-2-4/SBJ01620/",
//          "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/dragen-wts-multiqc/2023-07-21--4-2-4/SBJ01286/",
//          "icav2://92bc8608-9393-44b4-bf16-fb0c5a12269a/dragen-wts-multiqc/2023-07-21--4-2-4/SBJ01673/"
//        ],
//        "cl_config_sample_names_replace": {
//            "PRJ220412": "Ref_1_Good",
//            "MDX210318": "Ref_2_Good",
//            "PRJ220466": "Ref_3_Good",
//            "PRJ211234": "Ref_4_Bad",
//            "PRJ220790": "Ref_5_Bad",
//            "L2200121_dragen_qualimap": "Ref_1_Good",
//            "L2101521_dragen_qualimap": "Ref_2_Good",
//            "L2200188_dragen_qualimap": "Ref_3_Good",
//            "L2101763_dragen_qualimap": "Ref_4_Bad",
//            "L2200311_dragen_qualimap": "Ref_5_Bad"
//        }
//    }
//  ]'
export const icav2WtsQcReferenceSamplesUriMappingSSMParameterPath =
  '/icav2/umccr-prod/wts_qc_reference_samples';

/*
Resources generated by the WTS Stateful Stack
*/
export const wtsIcav2PipelineManagerSSMRoot = '/orcabus/wts';

// Stateful
export const wtsIcav2PipelineManagerDynamodbTableName = 'wtsICAv2AnalysesDynamoDBTable';
export const wtsDynamoDbTableSSMName = path.join(
  wtsIcav2PipelineManagerSSMRoot,
  'dynamodb_table_name'
);
export const wtsDynamoDbTableSSMArn = path.join(
  wtsIcav2PipelineManagerSSMRoot,
  'dynamodb_table_arn'
);

/*
WTS Stateless stack
*/

// FIXME deploy to stg/prod
export const wtsIcav2PipelineIdSSMParameterPath = '/icav2/umccr-prod/wts_4.2.4_pipeline_id'; // d1e84505-3082-4e0b-b246-cc952c8b1b73
export const wtsIcav2PipelineWorkflowType = 'wts';
export const wtsIcav2PipelineWorkflowTypeVersion = '4.2.4';
export const wtsIcav2ServiceVersion = '2024.07.01';
export const wtsIcav2ReadyEventSource = 'orcabus.workflowmanager';
export const wtsIcav2EventSource = 'orcabus.wts';
export const wtsIcav2EventDetailType = 'WorkflowRunStateChange';
export const wtsStateMachinePrefix = 'wtsSfn';
export const wtsDefaultDragenReferenceVersion = 'v9-r3';

export const wtsDefaultGencodeAnnotationVersion = 'v39';

export const wtsDefaultFastaReferenceVersion = 'hg38';

export const wtsDefaultArribaVersion = '2.4.0';

export const wtsDefaultQcReferenceSamplesVersion = '2023-07-21--4.2.4';

// Mock Stack
export const mockEventBusName = eventBusName;
export const mockInstrumentRunTableName = 'stacky-instrument-run-table';
export const mockInputMakerTableName = 'stacky-input-maker-table';
export const mockCttsov2InputGlueTableName = 'stacky-cttsov2-workflow-glue-table';
export const mockWgtsQcGlueTableName = 'stacky-wgts-qc-glue-table';
export const mockTnGlueTableName = 'stacky-tn-glue-table';

export const mockWtsGlueTableName = 'stacky-wts-glue-table';

export const mockWorkflowManagerTableName = 'stacky-workflow-manager-table';

// {
//    "project_id":"ea19a3f5-ec7c-4940-a474-c31cd91dbad4",
//    "project_name": "development"
// }
export const mockIcav2ProjectIdSsmParameterName = '/orcabus/stacky/icav2_project_id_and_name_json';
export const mockPrimaryOutputUriSsmParameterName = '/orcabus/stacky/primary_output_uri'; // icav2://7595e8f2-32d3-4c76-a324-c6a85dae87b5/primary/__instrument_run_id__/__portal_run_id__/
export const mockAnalysisOutputUriSsmParameterName = '/orcabus/stacky/analysis_output_uri'; // icav2://7595e8f2-32d3-4c76-a324-c6a85dae87b5/analysis/__workflow_name__/__portal_run_id__/
export const mockAnalysisLogsUriSsmParameterName = '/orcabus/stacky/analysis_logs_uri'; // icav2://7595e8f2-32d3-4c76-a324-c6a85dae87b5/logs/__workflow_name__/__portal_run_id__/

export const mockAnalysisCacheUriSsmParameterName = '/orcabus/stacky/analysis_cache_uri'; // icav2://7595e8f2-32d3-4c76-a324-c6a85dae87b5/cache/__workflow_name__/__portal_run_id__/
