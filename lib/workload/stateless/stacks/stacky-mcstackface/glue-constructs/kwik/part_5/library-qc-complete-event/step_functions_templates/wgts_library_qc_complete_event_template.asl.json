{
  "Comment": "A description of my state machine",
  "StartAt": "Move Inputs",
  "States": {
    "Move Inputs": {
      "Type": "Pass",
      "Parameters": {
        "payload_data.$": "$.payload.data"
      },
      "Next": "Get Library Info"
    },
    "Get Library Info": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.payload_data.library.orcabusId",
          "id_type": "${__library_partition__}"
        }
      },
      "ResultSelector": {
        "sample_type.$": "$.Item.sample_type.S",
        "fastq_list_row_ids.$": "$.Item.fastq_list_row_id_set.SS"
      },
      "ResultPath": "$.get_library_info_from_library_step",
      "Next": "Get Qc Metrics for each Fastq List Row In Library ID"
    },
    "Get Qc Metrics for each Fastq List Row In Library ID": {
      "Type": "Map",
      "ItemsPath": "$.get_library_info_from_library_step.fastq_list_row_ids",
      "ItemSelector": {
        "fastq_list_row_id.$": "$$.Map.Item.Value",
        "library_id.$": "$.payload_data.library.libraryId",
        "sample_type.$": "$.get_library_info_from_library_step.sample_type"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get Fastq List Row Item",
        "States": {
          "Get Fastq List Row Item": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.fastq_list_row_id",
                "id_type": "${__fastq_list_row_partition__}"
              }
            },
            "ResultSelector": {
              "fastq_list_row_item.$": "$.Item"
            },
            "ResultPath": "$.get_fastq_list_row_item_step",
            "Next": "Has Qc Metrics"
          },
          "Has Qc Metrics": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.get_fastq_list_row_item_step.fastq_list_row_item.qc_metrics_json",
                "IsPresent": true,
                "Next": "Get QC Metrics Json",
                "Comment": "Has qc_metrics_json column"
              }
            ],
            "Default": "Set QC Metrics To Null"
          },
          "Get QC Metrics Json": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "qc_metrics_json_str.$": "$.get_fastq_list_row_item_step.fastq_list_row_item.qc_metrics_json.S"
            },
            "ResultPath": "$.get_qc_metrics_json_step"
          },
          "Set QC Metrics To Null": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "qc_metrics_json_str": null
            },
            "ResultPath": "$.get_qc_metrics_json_step"
          }
        }
      },
      "ResultSelector": {
        "qc_metrics_list.$": "$.[*].get_qc_metrics_json_step.qc_metrics_json_str"
      },
      "ResultPath": "$.get_qc_metrics_for_fastq_list_row_in_library_step",
      "Next": "Collate RGID Metrics"
    },
    "Collate RGID Metrics": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__sum_coverages_for_rgids_lambda_function_arn__}",
        "Payload": {
          "sample_type.$": "$.get_library_info_from_library_step.sample_type",
          "qc_metrics_list.$": "$.get_qc_metrics_for_fastq_list_row_in_library_step.qc_metrics_list"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException",
            "States.TaskFailed"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "all_fastq_list_row_ids_qc_complete.$": "$.Payload.all_fastq_list_row_ids_qc_complete",
        "library_qc_metrics.$": "$.Payload.library_qc_metrics"
      },
      "ResultPath": "$.collate_metrics_step",
      "Next": "Raise LibraryQC Complete Event"
    },
    "Raise LibraryQC Complete Event": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.collate_metrics_step.all_fastq_list_row_ids_qc_complete",
          "BooleanEquals": true,
          "Next": "Update Library Coverages"
        }
      ],
      "Default": "Pass"
    },
    "Update Library Coverages": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.payload_data.library.orcabusId",
          "id_type": "${__library_partition__}"
        },
        "UpdateExpression": "SET qc_metrics = :qc_metrics",
        "ExpressionAttributeValues": {
          ":qc_metrics": {
            "S.$": "States.JsonToString($.collate_metrics_step.library_qc_metrics)"
          }
        }
      },
      "ResultPath": null,
      "Next": "Wait 1 Second"
    },
    "Wait 1 Second": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Push Library QC Complete Event"
    },
    "Push Library QC Complete Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}",
            "DetailType": "${__detail_type__}",
            "Detail": {
              "timestamp.$": "$$.State.EnteredTime",
              "status": "${__status__}",
              "payload": {
                "version": "${__payload_version__}",
                "data": {
                  "library.$": "$.payload_data.library",
                  "fastqListRowIds.$": "$.get_library_info_from_library_step.fastq_list_row_ids",
                  "qcMetrics.$": "$.collate_metrics_step.library_qc_metrics"
                }
              }
            }
          }
        ]
      },
      "End": true
    },
    "Pass": {
      "Type": "Pass",
      "End": true
    }
  }
}
