{
  "Comment": "A description of my state machine",
  "StartAt": "Get Extract Inputs",
  "States": {
    "Get Extract Inputs": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Service",
          "States": {
            "Get Service": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__get_cloudmap_service_lambda_function_arn__}",
                "Payload": {
                  "service_name": "${__service_name__}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "ResultSelector": {
                "service_obj.$": "$.Payload.service_obj"
              },
              "ResultPath": "$.get_service_obj_step",
              "Next": "Get Service Instances"
            },
            "Get Service Instances": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__get_service_instances_lambda_function_arn__}",
                "Payload": {
                  "service_id.$": "$.get_service_obj_step.service_obj.service_id"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "ResultSelector": {
                "service_instances.$": "$.Payload.service_instances"
              },
              "ResultPath": "$.get_service_instances_step",
              "Next": "Get extract ARN"
            },
            "Get extract ARN": {
              "Type": "Pass",
              "Parameters": {
                "extract_arn.$": "States.ArrayGetItem($.get_service_instances_step.service_instances[0].instance_attributes[?(@.attr_key=='${__extract_arn_key__}')].attr_value, 0)"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Library Obj from Library Orcabus ID",
          "States": {
            "Get Library Obj from Library Orcabus ID": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__get_library_obj_lambda_function_arn__}",
                "Payload": {
                  "value.$": "$.payload.data.library.orcabusId"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "ResultSelector": {
                "library_obj.$": "$.Payload"
              },
              "ResultPath": "$.get_library_obj_step",
              "Next": "Get payload inputs"
            },
            "Get payload inputs": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Get Fastq List Rows from Library",
                  "States": {
                    "Get Fastq List Rows from Library": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:getItem",
                      "Parameters": {
                        "TableName": "${__table_name__}",
                        "Key": {
                          "id.$": "$.payload.data.library.orcabusId",
                          "id_type": "${__library_table_partition_name__}"
                        }
                      },
                      "ResultSelector": {
                        "rgids_list.$": "$.Item.fastq_list_row_id_set.SS"
                      },
                      "ResultPath": "$.get_fastq_list_rows_step",
                      "Next": "Get WGTS QC alignment bams"
                    },
                    "Get WGTS QC alignment bams": {
                      "Type": "Map",
                      "ItemsPath": "$.get_fastq_list_rows_step.rgids_list",
                      "ItemSelector": {
                        "rgid.$": "$$.Map.Item.Value"
                      },
                      "ItemProcessor": {
                        "ProcessorConfig": {
                          "Mode": "INLINE"
                        },
                        "StartAt": "Get Portal Run ID",
                        "States": {
                          "Get Portal Run ID": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::dynamodb:getItem",
                            "Parameters": {
                              "TableName": "${__table_name__}",
                              "Key": {
                                "id.$": "$.rgid",
                                "id_type": "${__fastq_list_row_table_partition_name__}"
                              }
                            },
                            "ResultSelector": {
                              "portal_run_id.$": "$.Item.portal_run_id.S"
                            },
                            "ResultPath": "$.get_portal_run_id_step",
                            "Next": "Get alignment bam uri from portal run id"
                          },
                          "Get alignment bam uri from portal run id": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Parameters": {
                              "FunctionName": "${__get_alignment_bam_uri_lambda_function_arn__}",
                              "Payload": {
                                "portal_run_id.$": "$.get_portal_run_id_step.portal_run_id",
                                "workflow_status": "SUCCEEDED"
                              }
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 1,
                                "MaxAttempts": 3,
                                "BackoffRate": 2,
                                "JitterStrategy": "FULL"
                              }
                            ],
                            "ResultSelector": {
                              "alignment_bam_uri.$": "$.Payload.payload.data.outputs.dragenAlignmentBamUri"
                            },
                            "ResultPath": "$.get_alignment_bam_uri_step",
                            "End": true
                          }
                        }
                      },
                      "ResultSelector": {
                        "alignment_bams.$": "$[*].get_alignment_bam_uri_step.alignment_bam_uri"
                      },
                      "ResultPath": "$.get_alignment_bams_step",
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Get Individual ID from Subject OrcaBus ID",
                  "States": {
                    "Get Individual ID from Subject OrcaBus ID": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Parameters": {
                        "FunctionName": "${__get_individual_obj_lambda_function_arn__}",
                        "Payload": {
                          "value.$": "$.get_library_obj_step.library_obj.subject.orcabusId"
                        }
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 1,
                          "MaxAttempts": 3,
                          "BackoffRate": 2,
                          "JitterStrategy": "FULL"
                        }
                      ],
                      "ResultPath": "$.get_individual_id_step",
                      "ResultSelector": {
                        "individual_id.$": "States.ArrayGetItem($.Payload.individualSet[?(@.individualId =~ /SBJ.*?/i)].individualId, 0)"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "ResultSelector": {
                "alignment_bams.$": "$.[0].get_alignment_bams_step.alignment_bams",
                "individual_id.$": "$.[1].get_individual_id_step.individual_id"
              },
              "End": true
            }
          }
        }
      ],
      "ResultSelector": {
        "extract_arn.$": "$.[0].extract_arn",
        "individual_id.$": "$.[1].individual_id",
        "alignment_bams.$": "$.[1].alignment_bams"
      },
      "ResultPath": "$.extract_inputs",
      "Next": "Run Extraction over all bam files"
    },
    "Run Extraction over all bam files": {
      "Type": "Map",
      "ItemsPath": "$.extract_inputs.alignment_bams",
      "ItemSelector": {
        "alignment_bam.$": "$$.Map.Item.Value",
        "individual_id.$": "$.extract_inputs.individual_id",
        "library_id.$": "$.payload.data.library.libraryId"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Launch Holmes Extract",
        "States": {
          "Launch Holmes Extract": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Parameters": {
              "StateMachineArn.$": "$.extract_inputs.extract_arn",
              "Input": {
                "individualId.$": "$.individual_id",
                "libraryId.$": "$.library_id",
                "index.$": "$.alignment_bam",
                "reference": "${__reference_name__}"
              }
            },
            "ResultPath": "$.launch_holmes_extract_step",
            "End": true
          }
        }
      },
      "Next": "Holmes Extract Complete"
    },
    "Holmes Extract Complete": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__detail_type__}",
            "Source": "${__event_source__}",
            "Detail": {
              "status": "${__event_status__}",
              "payload": {
                "data": {
                  "library.$": "$.payload.data.library",
                  "bamFiles.$": "$.extract_inputs.alignment_bams"
                }
              }
            }
          }
        ]
      },
      "End": true
    }
  }
}
