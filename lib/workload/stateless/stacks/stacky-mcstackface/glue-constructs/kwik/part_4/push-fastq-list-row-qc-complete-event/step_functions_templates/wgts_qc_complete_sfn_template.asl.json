{
  "Comment": "A description of my state machine",
  "StartAt": "Move Inputs",
  "States": {
    "Move Inputs": {
      "Type": "Pass",
      "Next": "Get Fastq List Row Id from Portal Run Id",
      "Parameters": {
        "inputs.$": "$"
      }
    },
    "Get Fastq List Row Id from Portal Run Id": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.inputs.portalRunId",
          "id_type": "${__portal_run_partition_name__}"
        }
      },
      "ResultSelector": {
        "fastq_list_row_id.$": "$.Item.fastq_list_row_id.S"
      },
      "ResultPath": "$.get_fastq_list_row_id_from_portal_run_id",
      "Next": "Get Library Id from FastqListRow Id"
    },
    "Get Library Id from FastqListRow Id": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_fastq_list_row_id_from_portal_run_id.fastq_list_row_id",
          "id_type": "${__fastq_list_row_partition__}"
        }
      },
      "ResultSelector": {
        "library_orcabus_id.$": "$.Item.library_orcabus_id.S"
      },
      "ResultPath": "$.get_library_id_step",
      "Next": "GetLibraryInfo"
    },
    "GetLibraryInfo": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_library_id_step.library_orcabus_id",
          "id_type": "${__library_partition__}"
        }
      },
      "ResultSelector": {
        "sample_type.$": "$.Item.sample_type.S",
        "library_id.$": "$.Item.library_id.S"
      },
      "ResultPath": "$.get_library_info_step",
      "Next": "Collect QC Metrics from alignment directory"
    },
    "Collect QC Metrics from alignment directory": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__collect_qc_metrics_lambda_function_arn__}",
        "Payload": {
          "sample_type.$": "$.get_library_info_step.sample_type",
          "alignment_output_uri.$": "$.inputs.payload.data.outputs.dragenAlignmentOutputUri"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException",
            "States.TaskFailed"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "qc_metrics.$": "$.Payload"
      },
      "ResultPath": "$.get_qc_metrics_step",
      "Next": "Dump QC Metrics to Fastq List Row DB"
    },
    "Dump QC Metrics to Fastq List Row DB": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_fastq_list_row_id_from_portal_run_id.fastq_list_row_id",
          "id_type": "${__fastq_list_row_partition__}"
        },
        "UpdateExpression": "SET qc_metrics_json = :qc_metrics_json",
        "ExpressionAttributeValues": {
          ":qc_metrics_json": {
            "S.$": "States.JsonToString($.get_qc_metrics_step.qc_metrics)"
          }
        }
      },
      "ResultPath": null,
      "Next": "Wait 1 Second"
    },
    "Wait 1 Second": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Generate Event Data Object"
    },
    "Generate Event Data Object": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__generate_event_output_objects_lambda_function_arn__}",
        "Payload": {
          "fastq_list_row_id.$": "$.get_fastq_list_row_id_from_portal_run_id.fastq_list_row_id",
          "sample_type.$": "$.get_library_info_step.sample_type",
          "qc_metrics.$": "$.get_qc_metrics_step.qc_metrics",
          "library_orcabus_id.$": "$.get_library_id_step.library_orcabus_id",
          "library_id.$": "$.get_library_info_step.library_id"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException",
            "States.TaskFailed"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "event_data.$": "$.Payload.event_output_dict"
      },
      "ResultPath": "$.get_event_data_step",
      "Next": "Push FastqListRowQc Complete Event"
    },
    "Push FastqListRowQc Complete Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "timestamp.$": "$$.State.EnteredTime",
              "status": "${__output_status__}",
              "payload": {
                "version": "${__payload_version__}",
                "data.$": "$.get_event_data_step.event_data"
              }
            },
            "DetailType": "${__detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    }
  }
}
