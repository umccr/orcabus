{
  "Comment": "A description of my state machine",
  "StartAt": "Move inputs",
  "States": {
    "Move inputs": {
      "Type": "Pass",
      "Parameters": {
        "inputs.$": "$"
      },
      "Next": "Decompress SampleSheet"
    },
    "Decompress SampleSheet": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "decompress": true,
          "input.$": "$.inputs.payload.data.samplesheetB64gz"
        },
        "FunctionName": "${__decompress_samplesheet_function_arn__}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Comment": "Gunzip SampleSheet",
      "ResultPath": "$.decompress_samplesheet_step",
      "ResultSelector": {
        "samplesheet.$": "$.Payload.decompressed_dict"
      },
      "Next": "Save SampleSheet and Get Subject / Library Map Objects"
    },
    "Save SampleSheet and Get Subject / Library Map Objects": {
      "Type": "Parallel",
      "Next": "Start Samplesheet Shower",
      "Branches": [
        {
          "StartAt": "Get Library / Subject Map from SampleSheet",
          "States": {
            "Get Library / Subject Map from SampleSheet": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__get_subject_library_map_from_samplesheet_lambda_function_arn__}",
                "Payload": {
                  "samplesheet.$": "$.decompress_samplesheet_step.samplesheet"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.get_subject_library_map_from_samplesheet",
              "ResultSelector": {
                "library_obj_list.$": "$.Payload.library_obj_list",
                "specimen_obj_list.$": "$.Payload.specimen_obj_list",
                "subject_obj_list.$": "$.Payload.subject_obj_list"
              },
              "Next": "Generate event data objects"
            },
            "Generate event data objects": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__generate_event_objects_lambda_function_arn__}",
                "Payload": {
                  "instrument_run_id.$": "$.inputs.payload.data.instrumentRunId",
                  "samplesheet.$": "$.decompress_samplesheet_step.samplesheet",
                  "library_obj_list.$": "$.get_subject_library_map_from_samplesheet.library_obj_list",
                  "specimen_obj_list.$": "$.get_subject_library_map_from_samplesheet.specimen_obj_list",
                  "subject_obj_list.$": "$.get_subject_library_map_from_samplesheet.subject_obj_list"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "start_samplesheet_shower_event_data.$": "$.Payload.start_samplesheet_shower_event_data",
                "complete_samplesheet_shower_event_data.$": "$.Payload.complete_samplesheet_shower_event_data",
                "subject_event_data_list.$": "$.Payload.subject_event_data_list",
                "library_event_data_list.$": "$.Payload.library_event_data_list"
              },
              "ResultPath": "$.generate_event_objects_step",
              "End": true
            }
          }
        },
        {
          "StartAt": "Register SampleSheet by RunID (Instrument Run DB)",
          "States": {
            "Register SampleSheet by RunID (Instrument Run DB)": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Item": {
                  "id.$": "$.inputs.payload.data.instrumentRunId",
                  "id_type": "${__samplesheet_table_partition_name__}",
                  "samplesheet_dict": {
                    "S.$": "States.JsonToString($.decompress_samplesheet_step.samplesheet)"
                  }
                }
              },
              "ResultPath": null,
              "End": true
            }
          }
        }
      ],
      "ResultSelector": {
        "start_samplesheet_shower_event_data.$": "$.[0].generate_event_objects_step.start_samplesheet_shower_event_data",
        "complete_samplesheet_shower_event_data.$": "$.[0].generate_event_objects_step.complete_samplesheet_shower_event_data",
        "subject_event_data_list.$": "$.[0].generate_event_objects_step.subject_event_data_list",
        "library_event_data_list.$": "$.[0].generate_event_objects_step.library_event_data_list"
      },
      "ResultPath": "$.generate_event_objects_step"
    },
    "Start Samplesheet Shower": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "timestamp.$": "$$.Execution.StartTime",
              "status": "${__start_samplesheet_shower_status__}",
              "payload": {
                "version": "${__start_samplesheet_shower_payload_version__}",
                "data.$": "$.generate_event_objects_step.start_samplesheet_shower_event_data"
              }
            },
            "DetailType": "${__start_samplesheet_shower_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "ResultPath": null,
      "Next": "Wait 5 Seconds"
    },
    "Wait 5 Seconds": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Push Subject Events"
    },
    "Push Subject Events": {
      "Type": "Map",
      "ItemsPath": "$.generate_event_objects_step.subject_event_data_list",
      "ItemSelector": {
        "subject_id.$": "$$.Map.Item.Value.event_data.subject.subjectId",
        "subject_orcabus_id.$": "$$.Map.Item.Value.subject.orcabusId",
        "subject_event_data.$": "$$.Map.Item.Value.event_data",
        "instrument_run_id.$": "$$.Map.Item.Value.event_data.instrumentRunId"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get Subject (Instrument Run DB)",
        "States": {
          "Get Subject (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.subject_id",
                "id_type": "${__subject_table_partition_name__}"
              }
            },
            "Next": "Check if Subject in Instrument Run DB",
            "ResultPath": "$.get_subject_from_db_step",
            "ResultSelector": {
              "db_response.$": "$"
            }
          },
          "Check if Subject in Instrument Run DB": {
            "Type": "Choice",
            "Choices": [
              {
                "Not": {
                  "Variable": "$.get_subject_from_db_step.db_response.Item",
                  "IsPresent": true
                },
                "Next": "Add Instrument Run ID to Subject (Instrument Run DB)",
                "Comment": "New Subject"
              }
            ],
            "Default": "Append Instrument Run ID to Subject (Instrument Run DB)"
          },
          "Add Instrument Run ID to Subject (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Item": {
                "id": {
                  "S.$": "$.subject_id"
                },
                "id_type": {
                  "S": "${__subject_table_partition_name__}"
                },
                "orcabus_id": {
                  "S.$": "$.subject_orcabus_id"
                },
                "subject_id": {
                  "S.$": "$.subject_id"
                },
                "instrument_run_id_set": {
                  "SS.$": "States.Array($.instrument_run_id)"
                }
              }
            },
            "Next": "Wait Subject DB Sync",
            "ResultPath": null
          },
          "Append Instrument Run ID to Subject (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.subject_id",
                "id_type": "${__subject_table_partition_name__}"
              },
              "UpdateExpression": "ADD instrument_run_id_set :instrument_run_id_set",
              "ExpressionAttributeValues": {
                ":instrument_run_id_set": {
                  "SS.$": "States.Array($.instrument_run_id)"
                }
              }
            },
            "Next": "Wait Subject DB Sync",
            "ResultPath": null
          },
          "Wait Subject DB Sync": {
            "Type": "Wait",
            "Seconds": 1,
            "Next": "Subject In SampleSheet"
          },
          "Subject In SampleSheet": {
            "Type": "Task",
            "Resource": "arn:aws:states:::events:putEvents",
            "Parameters": {
              "Entries": [
                {
                  "Detail": {
                    "timestamp.$": "$$.Execution.StartTime",
                    "status": "${__subject_in_samplesheet_status__}",
                    "payload": {
                      "version": "${__subject_in_samplesheet_payload_version__}",
                      "data.$": "$.subject_event_data"
                    }
                  },
                  "DetailType": "${__subject_in_samplesheet_detail_type__}",
                  "EventBusName": "${__event_bus_name__}",
                  "Source": "${__event_source__}"
                }
              ]
            },
            "End": true,
            "ResultPath": null
          }
        }
      },
      "ResultPath": null,
      "Next": "Push Library Events"
    },
    "Push Library Events": {
      "Type": "Map",
      "ItemsPath": "$.generate_event_objects_step.library_event_data_list",
      "ItemSelector": {
        "library_id.$": "$$.Map.Item.Value.event_data.library.libraryId",
        "library_orcabus_id.$": "$$.Map.Item.Value.library.orcabusId",
        "library_event_data.$": "$$.Map.Item.Value.event_data",
        "instrument_run_id.$": "$$.Map.Item.Value.event_data.instrumentRunId"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "GetLibrary (Instrument Run DB)",
        "States": {
          "GetLibrary (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.library_id",
                "id_type": "${__library_table_partition_name__}"
              }
            },
            "Next": "Check if Library in Instrument Run DB",
            "ResultSelector": {
              "db_response.$": "$"
            },
            "ResultPath": "$.get_library_from_db_step"
          },
          "Check if Library in Instrument Run DB": {
            "Type": "Choice",
            "Choices": [
              {
                "Not": {
                  "Variable": "$.get_library_from_db_step.db_response.Item",
                  "IsPresent": true
                },
                "Next": "Add Instrument Run ID to Library (Instrument Run DB)",
                "Comment": "New Library"
              }
            ],
            "Default": "Append Instrument Run ID to Library (Instrument Run DB)"
          },
          "Append Instrument Run ID to Library (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.library_id",
                "id_type": "${__library_table_partition_name__}"
              },
              "UpdateExpression": "ADD instrument_run_id_set :instrument_run_id_set",
              "ExpressionAttributeValues": {
                ":instrument_run_id_set": {
                  "SS.$": "States.Array($.instrument_run_id)"
                }
              }
            },
            "Next": "Wait Library DB Sync",
            "ResultPath": null
          },
          "Add Instrument Run ID to Library (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Item": {
                "id": {
                  "S.$": "$.library_id"
                },
                "id_type": {
                  "S": "${__library_table_partition_name__}"
                },
                "orcabus_id": {
                  "S.$": "$.library_orcabus_id"
                },
                "library_id": {
                  "S.$": "$.library_event_data.library.libraryId"
                },
                "instrument_run_id_set": {
                  "SS.$": "States.Array($.instrument_run_id)"
                }
              }
            },
            "Next": "Wait Library DB Sync",
            "ResultPath": null
          },
          "Wait Library DB Sync": {
            "Type": "Wait",
            "Seconds": 1,
            "Next": "Library in SampleSheet"
          },
          "Library in SampleSheet": {
            "Type": "Task",
            "Resource": "arn:aws:states:::events:putEvents",
            "Parameters": {
              "Entries": [
                {
                  "Detail": {
                    "timestamp.$": "$$.Execution.StartTime",
                    "status": "${__library_in_samplesheet_status__}",
                    "payload": {
                      "version": "${__library_in_samplesheet_payload_version__}",
                      "data.$": "$.library_event_data"
                    }
                  },
                  "DetailType": "${__library_in_samplesheet_detail_type__}",
                  "EventBusName": "${__event_bus_name__}",
                  "Source": "${__event_source__}"
                }
              ]
            },
            "End": true,
            "ResultPath": null
          }
        }
      },
      "ResultPath": null,
      "Next": "Wait 5 More Seconds"
    },
    "Wait 5 More Seconds": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "Complete Samplesheet Shower"
    },
    "Complete Samplesheet Shower": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "timestamp.$": "$$.Execution.StartTime",
              "status": "${__complete_samplesheet_shower_status__}",
              "payload": {
                "version": "${__complete_samplesheet_shower_payload_version__}",
                "data.$": "$.generate_event_objects_step.complete_samplesheet_shower_event_data"
              }
            },
            "DetailType": "${__complete_samplesheet_shower_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    }
  }
}
