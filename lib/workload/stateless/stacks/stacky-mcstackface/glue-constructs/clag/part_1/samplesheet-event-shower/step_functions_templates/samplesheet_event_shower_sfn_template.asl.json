{
  "Comment": "A description of my state machine",
  "StartAt": "Save input vars",
  "States": {
    "Save input vars": {
      "Type": "Pass",
      "Next": "Get Library IDs from Gzipped SampleSheet",
      "Assign": {
        "instrumentRunId": "{% $states.input.payload.data.instrumentRunId %}",
        "samplesheetB64gz": "{% $states.input.payload.data.samplesheetB64gz %}"
      }
    },
    "Get Library IDs from Gzipped SampleSheet": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__get_library_ids_from_gzipped_samplesheet_lambda_function_arn__}",
        "Payload": {
          "samplesheetB64gz": "{% $samplesheetB64gz %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Start SampleSheet Shower",
      "Assign": {
        "libraryIdList": "{% $states.result.Payload.libraryIdList %}"
      }
    },
    "Start SampleSheet Shower": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": {
              "timestamp": "{% $states.context.State.EnteredTime %}",
              "status": "${__start_samplesheet_shower_status__}",
              "payload": {
                "version": "${__start_samplesheet_shower_payload_version__}",
                "data": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                }
              }
            },
            "DetailType": "${__start_samplesheet_shower_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "Next": "Add instrument run id"
    },
    "Add instrument run id": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Next": "For each Library ID",
      "Arguments": {
        "TableName": "${__table_name__}",
        "Item": {
          "id": {
            "S": "{% $instrumentRunId %}"
          },
          "id_type": {
            "S": "${__instrument_run_table_partition_name__}"
          }
        }
      }
    },
    "For each Library ID": {
      "Type": "Map",
      "Items": "{% $libraryIdList %}",
      "Label": "ForeachLibraryID",
      "MaxConcurrency": 1,
      "ItemSelector": {
        "libraryIdIter": "{% $states.context.Map.Item.Value %}",
        "instrumentRunIdIter": "{% $instrumentRunId %}",
        "samplesheetB64gzIter": "{% $samplesheetB64gz %}"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "DISTRIBUTED",
          "ExecutionType": "STANDARD"
        },
        "StartAt": "Save Library Map Vars",
        "States": {
          "Save Library Map Vars": {
            "Type": "Pass",
            "Next": "Get Library Obj and event data from metadata API",
            "Assign": {
              "libraryIdIter": "{% $states.input.libraryIdIter %}",
              "instrumentRunIdIter": "{% $states.input.instrumentRunIdIter %}",
              "samplesheetB64gzIter": "{% $states.input.samplesheetB64gzIter %}"
            }
          },
          "Get Library Obj and event data from metadata API": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Arguments": {
              "FunctionName": "${__get_library_object_and_event_data_from_metadata_api_lambda_function_arn__}",
              "Payload": {
                "libraryId": "{% $libraryIdIter %}",
                "samplesheetB64gz": "{% $samplesheetB64gzIter %}",
                "instrumentRunId": "{% $instrumentRunIdIter %}"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "Add library id to instrument run id",
            "Assign": {
              "libraryObj": "{% $states.result.Payload.libraryObj %}",
              "eventDataObj": "{% $states.result.Payload.eventDataObj %}"
            }
          },
          "Add library id to instrument run id": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Next": "Get library in DB",
            "Arguments": {
              "TableName": "${__table_name__}",
              "Key": {
                "id": {
                  "S": "{% $instrumentRunIdIter %}"
                },
                "id_type": {
                  "S": "${__instrument_run_table_partition_name__}"
                }
              },
              "UpdateExpression": "ADD library_set :library_set",
              "ExpressionAttributeValues": {
                ":library_set": {
                  "SS": "{% [ $libraryObj.orcabusId ] %}"
                }
              }
            }
          },
          "Get library in DB": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Arguments": {
              "TableName": "${__table_name__}",
              "Key": {
                "id": {
                  "S": "{% $libraryObj.orcabusId %}"
                },
                "id_type": {
                  "S": "${__library_table_partition_name__}"
                }
              }
            },
            "Next": "Check library in Run DB",
            "Assign": {
              "libraryDbItem": "{% $states.result.Item ? $states.result.Item : null %}"
            }
          },
          "Check library in Run DB": {
            "Type": "Choice",
            "Choices": [
              {
                "Next": "Append Instrument run id to library (Instrument Run DB)",
                "Condition": "{% $libraryDbItem != null %}"
              }
            ],
            "Default": "Add instrument run id to library (Instrument Run DB)"
          },
          "Append Instrument run id to library (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Arguments": {
              "TableName": "${__table_name__}",
              "Key": {
                "id": {
                  "S": "{% $libraryObj.orcabusId %}"
                },
                "id_type": {
                  "S": "${__library_table_partition_name__}"
                }
              },
              "UpdateExpression": "ADD instrument_run_id_set :instrument_run_id_set",
              "ExpressionAttributeValues": {
                ":instrument_run_id_set": {
                  "SS": "{% [ $instrumentRunIdIter ] %}"
                }
              }
            },
            "Next": "Put Library ID Instrument Run ID Event"
          },
          "Add instrument run id to library (Instrument Run DB)": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Arguments": {
              "TableName": "${__table_name__}",
              "Item": {
                "id": {
                  "S": "{% $libraryObj.orcabusId %}"
                },
                "id_type": {
                  "S": "${__library_table_partition_name__}"
                },
                "library_id": {
                  "S": "{% $libraryIdIter %}"
                },
                "library_obj": {
                  "S": "{% $string($libraryObj) %}"
                },
                "instrument_run_id_set": {
                  "SS": "{% [ $instrumentRunIdIter ] %}"
                }
              }
            },
            "Next": "Put Library ID Instrument Run ID Event"
          },
          "Put Library ID Instrument Run ID Event": {
            "Type": "Task",
            "Resource": "arn:aws:states:::events:putEvents",
            "Arguments": {
              "Entries": [
                {
                  "Detail": {
                    "timestamp": "{% $states.context.State.EnteredTime %}",
                    "status": "${__library_in_samplesheet_status__}",
                    "payload": {
                      "version": "${__library_in_samplesheet_payload_version__}",
                      "data": "{% $eventDataObj %}"
                    }
                  },
                  "DetailType": "${__library_in_samplesheet_detail_type__}",
                  "EventBusName": "${__event_bus_name__}",
                  "Source": "${__event_source__}"
                }
              ]
            },
            "Output": {},
            "End": true
          }
        }
      },
      "Next": "Wait 5 (Post)"
    },
    "Wait 5 (Post)": {
      "Type": "Wait",
      "Seconds": 5,
      "Next": "SampleSheet Complete"
    },
    "SampleSheet Complete": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": {
              "timestamp": "{% $states.context.State.EnteredTime %}",
              "status": "${__start_samplesheet_shower_status__}",
              "payload": {
                "version": "${__start_samplesheet_shower_payload_version__}",
                "data": {
                  "instrumentRunId": "{% $instrumentRunId %}"
                }
              }
            },
            "DetailType": "${__complete_samplesheet_shower_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
