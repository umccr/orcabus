{
  "Comment": "A description of my state machine",
  "StartAt": "Move Inputs",
  "States": {
    "Move Inputs": {
      "Type": "Pass",
      "Parameters": {
        "workflow_inputs.$": "$"
      },
      "Next": "Is WTS Library"
    },
    "Is WTS Library": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.workflow_inputs.workflow_name",
          "StringEquals": "${__rna_workflow_run_name__}",
          "Next": "Get RNA Library Item"
        }
      ],
      "Default": "Get DNA Library Item"
    },
    "Get RNA Library Item": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.workflow_inputs.linkedLibraries[0].orcabusId",
          "id_type": "${__library_partition_name__}"
        }
      },
      "ResultPath": "$.get_library_item_step",
      "Next": "Library Item In DataBase"
    },
    "Get DNA Library Item": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "States.ArrayGetItem($.workflow_inputs.linkedLibraries[?(@.libraryId==$.workflow_inputs.payload.data.tags.tumorLibraryId)].orcabusId, 0)",
          "id_type": "${__library_partition_name__}"
        }
      },
      "ResultPath": "$.get_library_item_step",
      "Next": "Library Item In DataBase"
    },
    "Library Item In DataBase": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get_library_item_step.Item",
          "IsPresent": true,
          "Comment": "Library Item In DataBase",
          "Next": "Add Oncoanalyser Analysis Complete"
        }
      ],
      "Default": "Not a TN library"
    },
    "Add Oncoanalyser Analysis Complete": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.workflow_inputs.payload.data.library.orcabusId",
          "id_type": "${__library_partition_name__}"
        },
        "UpdateExpression": "SET outputs = :outputs, analysis_complete = :analysis_complete",
        "ExpressionAttributeValues": {
          ":outputs": {
            "S.$": "States.JsonToString($.workflow_inputs.payload.data.outputs)"
          },
          ":analysis_complete": {
            "BOOL": true
          }
        }
      },
      "ResultPath": null,
      "Next": "Wait"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Get Libraries From Subject"
    },
    "Get Libraries From Subject": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
      "Parameters": {
        "TableName": "${__table_name__}",
        "ExpressionAttributeValues": {
          ":subject_orcabus_id": {
            "S.$": "$.get_library_item_step.Item.subject_orcabus_id.S"
          },
          ":id_type": {
            "S": "${__library_partition_name__}"
          }
        },
        "ExpressionAttributeNames": {
          "#subject_orcabus_id": "subject_orcabus_id",
          "#id_type": "id_type"
        },
        "FilterExpression": "#subject_orcabus_id = :subject_orcabus_id AND #id_type = :id_type"
      },
      "ResultSelector": {
        "library_set.$": "$.Items[*].id"
      },
      "ResultPath": "$.get_subject_library_set_step",
      "Next": "Collect All Libraries in Subject"
    },
    "Collect All Libraries in Subject": {
      "Type": "Map",
      "ItemsPath": "$.get_subject_library_set_step.library_set",
      "ItemSelector": {
        "library_orcabus_id.$": "$$.Map.Item.Value"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get Library Map",
        "States": {
          "Get Library Map": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.library_orcabus_id",
                "id_type": "${__library_partition_name__}"
              }
            },
            "ResultPath": "$.get_library_map_step",
            "Next": "Library Oncoanalyser Complete"
          },
          "Library Oncoanalyser Complete": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.get_library_map_step.Item.analysis_complete",
                "BooleanEquals": true,
                "Comment": "Library Has Completed Analysis",
                "Next": "Set Output"
              }
            ],
            "Default": "Set Output as Null"
          },
          "Set Output": {
            "Type": "Pass",
            "Parameters": {
              "output": {
                "library": {
                  "orcabus_id.$": "$.get_library_map_step.Item.id.S",
                  "library_id.$": "$.get_library_map_step.Item.library_id.S",
                  "phenotype.$": "$.get_library_map_step.Item.phenotype.S",
                  "workflow.$": "$.get_library_map_step.Item.workflow.S",
                  "type.$": "$.get_library_map_step.Item.type.S",
                  "assay.$": "$.get_library_map_step.Item.assay.S",
                  "subject_id.$": "$.get_library_map_step.Item.subject_id.S",
                  "subject_orcabus_id.$": "$.get_library_map_step.Item.subject_orcabus_id.S"
                }
              }
            },
            "End": true
          },
          "Set Output as Null": {
            "Type": "Pass",
            "Parameters": {
              "output": {
                "library": null
              }
            },
            "End": true
          }
        }
      },
      "ResultSelector": {
        "complementary_library_obj_list.$": "$.[*].output.library"
      },
      "ResultPath": "$.get_complementary_libraries_step",
      "Next": "Find Complement Library Pair"
    },
    "Find Complement Library Pair": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__get_complement_library_pair_lambda_function_arn__}",
        "Payload": {
          "library_obj": {
            "orcabus_id.$": "$.workflow_inputs.payload.data.library.orcabusId",
            "library_id.$": "$.workflow_inputs.payload.data.library.libraryId",
            "phenotype.$": "$.get_library_item_step.Item.phenotype.S",
            "workflow.$": "$.get_library_item_step.Item.workflow.S",
            "type.$": "$.get_library_item_step.Item.type.S",
            "assay.$": "$.get_library_item_step.Item.assay.S",
            "subject_orcabus_id.$": "$.get_library_item_step.Item.subject_orcabus_id.S"
          },
          "complementary_library_obj_list.$": "$.get_complementary_libraries_step.complementary_library_obj_list"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "successful_pairing.$": "$.Payload.successful_pairing",
        "tumor_dna_library.$": "$.Payload.tumor_dna_library",
        "normal_dna_library.$": "$.Payload.normal_dna_library",
        "tumor_rna_library.$": "$.Payload.tumor_rna_library"
      },
      "ResultPath": "$.get_orcabus_dna_rna_pair_step",
      "Next": "Successful Pairing"
    },
    "Successful Pairing": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get_orcabus_dna_rna_pair_step.successful_pairing",
          "BooleanEquals": true,
          "Next": "Collect Parameters",
          "Comment": "Found Matching Pair"
        }
      ],
      "Default": "No Pair Found"
    },
    "Collect Parameters": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Oncoanalyser Outputs",
          "States": {
            "Get Oncoanalyser Outputs": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Get DNA Outputs",
                  "States": {
                    "Get DNA Outputs": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:getItem",
                      "Parameters": {
                        "TableName": "${__table_name__}",
                        "Key": {
                          "id.$": "$.get_orcabus_dna_rna_pair_step.tumor_dna_library.orcabus_id",
                          "id_type": "${__library_partition_name__}"
                        }
                      },
                      "ResultSelector": {
                        "outputs.$": "States.StringToJson($.Item.outputs.S)"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Get RNA Outputs",
                  "States": {
                    "Get RNA Outputs": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:getItem",
                      "Parameters": {
                        "TableName": "MyDynamoDBTable",
                        "Key": {
                          "id.$": "$.get_orcabus_dna_rna_pair_step.tumor_rna_library.orcabus_id",
                          "id_type": "${__library_partition_name__}"
                        }
                      },
                      "ResultSelector": {
                          "outputs.$": "States.StringToJson($.Item.outputs.S)"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "ResultSelector": {
                "dna_outputs.$": "$.[0].outputs",
                "rna_outputs.$": "$.[1].outputs"
              },
              "ResultPath": "$.get_oncoanalyser_outputs_step",
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Portal Run Id and Workflow Run Name",
          "States": {
            "Get Portal Run Id and Workflow Run Name": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": "${__sfn_preamble_state_machine_arn__}",
                "Input": {}
              },
              "End": true,
              "ResultSelector": {
                "portal_run_id.$": "$.Output.portal_run_id",
                "workflow_run_name.$": "$.Output.workflow_run_name"
              },
              "ResultPath": "$.get_portal_and_run_name_step"
            }
          }
        }
      ],
      "ResultSelector": {
        "dna_outputs.$": "$.[0].dna_outputs",
        "rna_outputs.$": "$.[0].rna_outputs",
        "portal_run_id.$": "$.[1].get_portal_and_run_name_step.portal_run_id",
        "workflow_run_name.$": "$.[1].get_portal_and_run_name_step.workflow_run_name"
      },
      "ResultPath": "$.get_parameters_step",
      "Next": "Get Subject Object From Orcabus Id"
    },
    "Get Subject Object From Orcabus Id": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__get_orcabus_obj_from_subject_id_lambda_function_arn__}",
        "Payload": {
          "value.$": "$.get_library_item_step.Item.subject_orcabus_id.S"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "subject_obj.$": "$.Payload",
        "individual_id.$": "States.ArrayGetItem($.Payload.individualSet[?(@.individualId =~ /SBJ.*?/i)].individualId, 0)"
      },
      "ResultPath": "$.get_subject_obj_step",
      "Next": "Generate Oncoanalyser DNA/RNA Event Payload"
    },
    "Generate Oncoanalyser DNA/RNA Event Payload": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__generate_draft_event_payload_lambda_function_arn__}",
        "Payload": {
          "subject_id.$": "$.get_library_item_step.Item.subject_id.S",
          "individual_id.$": "$.get_subject_obj_step.individual_id",
          "tumor_dna_library_id.$": "$.get_orcabus_dna_rna_pair_step.tumor_dna_library.library_id",
          "normal_dna_library_id.$": "$.get_orcabus_dna_rna_pair_step.normal_dna_library.library_id",
          "tumor_rna_library_id.$": "$.get_orcabus_dna_rna_pair_step.tumor_rna_library.library_id",
          "dna_outputs.$": "$.get_parameters_step.dna_outputs",
          "rna_outputs.$": "$.get_parameters_step.rna_outputs"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.generate_draft_event_payload_data_step",
      "Next": "Push Oncoanalyser DNA/RNA Ready Event",
      "ResultSelector": {
        "input_event_data.$": "$.Payload.input_event_data",
        "event_tags.$": "$.Payload.event_tags"
      }
    },
    "Push Oncoanalyser DNA/RNA Ready Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${__launch_ready_event_sfn_arn__}",
        "Input": {
          "StatePayload": {
            "portal_run_id.$": "$.get_parameters_step.portal_run_id",
            "workflow_run_name.$": "$.get_parameters_step.workflow_run_name",
            "linked_libraries": [
              {
                "libraryId.$": "$.get_orcabus_dna_rna_pair_step.tumor_dna_library.library_id",
                "orcabusId.$": "$.get_orcabus_dna_rna_pair_step.tumor_dna_library.orcabus_id"
              },
              {
                "libraryId.$": "$.get_orcabus_dna_rna_pair_step.normal_dna_library.library_id",
                "orcabusId.$": "$.get_orcabus_dna_rna_pair_step.normal_dna_library.orcabus_id"
              },
              {
                "libraryId.$": "$.get_orcabus_dna_rna_pair_step.tumor_rna_library.library_id",
                "orcabusId.$": "$.get_orcabus_dna_rna_pair_step.tumor_rna_library.orcabus_id"
              }
            ],
            "data_inputs.$": "$.generate_draft_event_payload_data_step.input_event_data",
            "data_tags.$": "$.generate_draft_event_payload_data_step.event_tags"
          }
        }
      },
      "ResultPath": null,
      "End": true
    },
    "No Pair Found": {
      "Type": "Pass",
      "End": true
    },
    "Not a TN library": {
      "Type": "Pass",
      "End": true
    }
  }
}