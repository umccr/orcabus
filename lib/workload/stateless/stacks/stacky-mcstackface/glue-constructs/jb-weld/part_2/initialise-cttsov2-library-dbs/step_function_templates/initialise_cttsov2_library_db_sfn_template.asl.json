{
  "Comment": "A description of my state machine",
  "StartAt": "Move Inputs",
  "States": {
    "Move Inputs": {
      "Type": "Pass",
      "Next": "Get RGID From BCLConvert Outputs",
      "Parameters": {
        "inputs.$": "$",
        "input_payload_data.$": "$.payload.data"
      }
    },
    "Get RGID From BCLConvert Outputs": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get RGID from BCLConvert Data",
        "States": {
          "Get RGID from BCLConvert Data": {
            "Type": "Pass",
            "Parameters": {
              "index.$": "$.bclconvert_data_row.index",
              "index2.$": "$.bclconvert_data_row.index2",
              "lane.$": "$.bclconvert_data_row.lane",
              "instrument_run_id.$": "$.instrument_run_id",
              "library_id.$": "$.library_id"
            },
            "Result": {
              "rgid": "States.Format('{}.{}.{}.{}.{}', $.index, $.index2, $.lane, $.instrument_run_id, $.library_id)"
            },
            "ResultPath": "$.get_rgid_step",
            "Next": "Set Outputs"
          },
          "Set Outputs": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "rgid.$": "$.get_additional_parameters_step.rgid",
              "bclconvert_data_row": "$.bclconvert_data_row"
            }
          }
        }
      },
      "Next": "Add DataBase Inputs",
      "ItemsPath": "$.input_payload_data.bclconvertDataRows",
      "ItemSelector": {
        "bclconvert_data_row.$": "$$.Map.Item.Value",
        "instrument_run_id.$": "$.input_payload_data.instrumentRunId",
        "library_id.$": "$.input_payload_data.library.internalId"
      },
      "ResultPath": "$.bclconvert_and_tso500l_inputs"
    },
    "Add DataBase Inputs": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get RGIDs as String Dict",
          "States": {
            "Get RGIDs as String Dict": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "rgid to dynamodb string dict",
                "States": {
                  "rgid to dynamodb string dict": {
                    "Type": "Pass",
                    "End": true,
                    "Parameters": {
                      "S.$": "$.rgid"
                    }
                  }
                }
              },
              "Next": "Add Library and update Instrument Partition",
              "ItemsPath": "$.bclconvert_and_tso500l_inputs",
              "ItemSelector": {
                "rgid.$": "$.rgid"
              },
              "ResultPath": "$.get_rgids_as_dynamodb_string_dict"
            },
            "Add Library and update Instrument Partition": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "Append Library and RGID to Instrument Run ID",
                  "States": {
                    "Append Library and RGID to Instrument Run ID": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:updateItem",
                      "Parameters": {
                        "TableName": "${__table_name__}",
                        "Key": {
                          "id.$": "$.instrument_run_id",
                          "id_type": "${__instrument_run_partition_name__}"
                        },
                        "UpdateExpression": "SET library_list = list_append(library_list, :library_list), rgid_list = list_append(rgid_list, :rgid_list)",
                        "ExpressionAttributeValues": {
                          ":library_list": {
                            "L": [
                              {
                                "N.$": "$.input_payload_data.library.id"
                              }
                            ]
                          },
                          ":rgid_list": {
                            "L.$": "$.get_rgids_as_dynamodb_string_dict"
                          }
                        }
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Initialise Library ID",
                  "States": {
                    "Initialise Library ID": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::dynamodb:putItem",
                      "Parameters": {
                        "TableName": "${__table_name__}",
                        "Item": {
                          "id": {
                            "N.$": "$.input_payload_data.library.id"
                          },
                          "id_type": {
                            "S": "${__library_partition_name__}"
                          },
                          "internal_id": {
                            "S.$": "$.input_payload_data.library.internalId"
                          },
                          "rgids": {
                            "L.$": "$.get_rgids_as_dynamodb_string_dict"
                          }
                        }
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        },
        {
          "StartAt": "For each RGID",
          "States": {
            "For each RGID": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "INLINE"
                },
                "StartAt": "Initialise / Set Data Rows by RGID",
                "States": {
                  "Initialise / Set Data Rows by RGID": {
                    "Type": "Parallel",
                    "Branches": [
                      {
                        "StartAt": "Set BCLConvert Data Row",
                        "States": {
                          "Set BCLConvert Data Row": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::dynamodb:putItem",
                            "Parameters": {
                              "TableName": "${__table_name__}",
                              "Item": {
                                "id": {
                                  "S.$": "$.rgid"
                                },
                                "id_type": {
                                  "S": "${__bclconvert_data_row_partition_name__}"
                                },
                                "bclconvert_data_row": {
                                  "S.$": "States.JsonToString($.bclconvert_data_row)"
                                }
                              }
                            },
                            "End": true
                          }
                        }
                      },
                      {
                        "StartAt": "Initialise Fastq List Row",
                        "States": {
                          "Initialise Fastq List Row": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::dynamodb:putItem",
                            "Parameters": {
                              "TableName": "${__table_name__}",
                              "Item": {
                                "id": {
                                  "S.$": "$.rgid"
                                },
                                "id_type": {
                                  "S": "${__fastq_list_row_partition_name__}"
                                }
                              }
                            },
                            "End": true
                          }
                        }
                      }
                    ],
                    "End": true
                  }
                }
              },
              "End": true,
              "ItemsPath": "$.bclconvert_and_tso500l_inputs"
            }
          }
        }
      ],
      "End": true
    }
  }
}
