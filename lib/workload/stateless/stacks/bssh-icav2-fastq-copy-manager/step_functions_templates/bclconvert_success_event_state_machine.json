{
  "QueryLanguage": "JSONata",
  "Comment": "Generate an icav2 manifest file for copying data out from a bclconvert workflow session, then deploy and wait for the copy jobs to complete",
  "StartAt": "Move inputs",
  "States": {
    "Move inputs": {
      "Type": "Pass",
      "Next": "Get Manifest",
      "Assign": {
        "workflowInputs": "{% $states.input %}"
      }
    },
    "Get Manifest": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "For each copy job request",
      "Arguments": {
        "FunctionName": "${__bclconvert_success_event_lambda_arn__}",
        "Payload": {
          "projectId": "{% $workflowInputs.payload.data.inputs.bsshProjectId %}",
          "analysisId": "{% $workflowInputs.payload.data.inputs.bsshAnalysisId %}",
          "outputUri": "{% $workflowInputs.payload.data.engineParameters.outputUri %}"
        }
      },
      "Assign": {
        "fastqListRowsB64gz": "{% $states.result.Payload.fastqListRowsB64gz %}",
        "icav2CopyJobList": "{% $states.result.Payload.icav2CopyJobList %}"
      }
    },
    "For each copy job request": {
      "Type": "Map",
      "Items": "{% $icav2CopyJobList %}",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Launch Copy Job",
        "States": {
          "Launch Copy Job": {
            "Type": "Task",
            "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
            "End": true,
            "Arguments": {
              "Entries": [
                {
                  "Detail": {
                    "sourceUriList": "{% $states.input.sourceUriList %}",
                    "destinationUri": "{% $states.input.destinationUri %}",
                    "taskToken": "{% $states.context.Task.Token %}"
                  },
                  "DetailType": "${__icav2_copy_detail_type__}",
                  "EventBusName": "${__eventbus_name__}",
                  "Source": "${__event_source__}"
                }
              ]
            }
          }
        }
      },
      "Next": "Submit Completion Event"
    },
    "Submit Completion Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Next": "Succeed",
      "Arguments": {
        "Entries": [
          {
            "Detail": {
              "status": "SUCCEEDED",
              "timestamp": "{% $states.context.State.EnteredTime %}",
              "portalRunId": "{% $workflowInputs.portalRunId %}",
              "workflowName": "${__workflow_name__}",
              "workflowVersion": "${__workflow_version__}",
              "workflowRunName": "{% $workflowInputs.workflowRunName %}",
              "linkedLibraries": "{% $workflowInputs.linkedLibraries %}",
              "payload": {
                "version": "${__payload_version__}",
                "data": {
                  "inputs": "{% $workflowInputs.payload.data.inputs %}",
                  "engineParameters": "{% $workflowInputs.payload.data.engineParameters %}",
                  "outputs": {
                    "outputUri": "{% $workflowInputs.payload.data.engineParameters.outputUri %}",
                    "instrumentRunId": "{% $workflowInputs.payload.data.inputs.instrumentRunId %}",
                    "fastqListRowsB64gz": "{% $fastqListRowsB64gz %}"
                  }
                },
                "tags": {
                  "instrumentRunId": "{% $workflowInputs.payload.data.inputs.instrumentRunId %}"
                }
              }
            },
            "DetailType": "${__detail_type__}",
            "EventBusName": "${__eventbus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      }
    },
    "Succeed": {
      "Type": "Succeed"
    }
  }
}
