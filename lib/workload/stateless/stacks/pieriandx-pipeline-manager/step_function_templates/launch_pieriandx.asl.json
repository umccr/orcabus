{
  "Comment": "A description of my state machine",
  "StartAt": "move_inputs",
  "States": {
    "move_inputs": {
      "Type": "Pass",
      "Parameters": {
        "workflow_inputs.$": "$"
      },
      "Next": "Get attributes from SSM"
    },
    "Get attributes from SSM": {
      "Type": "Parallel",
      "Next": "generate_pieriandx_objects",
      "Branches": [
        {
          "StartAt": "Get Available Dag Versions",
          "States": {
            "Get Available Dag Versions": {
              "Type": "Task",
              "Parameters": {
                "Name": "${__dag_versions_ssm_parameter__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "Next": "Dag Version set",
              "ResultPath": "$.get_dag_versions_from_ssm_parameter_step",
              "ResultSelector": {
                "dag_versions_uri_map.$": "States.StringToJson($.Parameter.Value)"
              }
            },
            "Dag Version set": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.workflow_inputs.dagVersion",
                  "IsPresent": true,
                  "Comment": "Dag Version Is Set",
                  "Next": "Get Dag Version Value"
                }
              ],
              "Default": "Get Default Dag Version Value"
            },
            "Get Default Dag Version Value": {
              "Type": "Pass",
              "Next": "Get Dag Dict from SSM Parameter",
              "Parameters": {
                "dag_version": "${__default_dag_version__}"
              },
              "ResultPath": "$.get_dag_version_step"
            },
            "Get Dag Version Value": {
              "Type": "Pass",
              "Next": "Get Dag Dict from SSM Parameter",
              "Parameters": {
                "dag_version.$": "$.workflow_inputs.dagVersion"
              },
              "ResultPath": "$.get_dag_version_step"
            },
            "Get Dag Dict from SSM Parameter": {
              "Type": "Pass",
              "End": true,
              "Parameters": {
                "dag_version_obj.$": "States.ArrayGetItem($.get_dag_versions_from_ssm_parameter_step.dag_versions_uri_map[?(@.dagName==$.get_dag_version_step.dag_version)], 0)"
              },
              "ResultPath": "$.get_dag_version_step"
            }
          }
        },
        {
          "StartAt": "Get available panel names",
          "States": {
            "Get available panel names": {
              "Type": "Task",
              "Parameters": {
                "Name": "${__panel_names_ssm_parameter__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "Next": "Panel Name Set",
              "ResultSelector": {
                "panel_names_map.$": "States.StringToJson($.Parameter.Value)"
              },
              "ResultPath": "$.get_panel_name_versions_from_ssm_parameter_step"
            },
            "Panel Name Set": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.workflow_inputs.payload.data.inputs.panelVersion",
                  "IsPresent": true,
                  "Next": "Get Panel Name from inputs",
                  "Comment": "Panel Name is set"
                }
              ],
              "Default": "Get Default Panel Name"
            },
            "Get Default Panel Name": {
              "Type": "Pass",
              "Next": "Get Panel Name Value from SSM Parameter",
              "Parameters": {
                "panel_name": "${__default_panel_name__}"
              },
              "ResultPath": "$.get_panel_name_step"
            },
            "Get Panel Name from inputs": {
              "Type": "Pass",
              "Next": "Get Panel Name Value from SSM Parameter",
              "Parameters": {
                "panel_name.$": "$.workflow_inputs.payload.data.inputs.panelVersion"
              },
              "ResultPath": "$.get_panel_name_step"
            },
            "Get Panel Name Value from SSM Parameter": {
              "Type": "Pass",
              "End": true,
              "Parameters": {
                "panel_name.$": "States.ArrayGetItem($.get_panel_name_versions_from_ssm_parameter_step.panel_names_map[?(@.panelName==$.get_panel_name_step.panel_name)].panelId, 0)"
              },
              "ResultPath": "$.get_panel_name_step"
            }
          }
        }
      ],
      "ResultSelector": {
        "dag_version_obj.$": "$[0].get_dag_version_step.dag_version_obj",
        "panel_name.$": "$[1].get_panel_name_step.panel_name"
      },
      "ResultPath": "$.get_ssm_parameters_step"
    },
    "generate_pieriandx_objects": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__generate_pieriandx_objects_lambda_function_arn__}",
        "Payload": {
          "dag.$": "$.get_ssm_parameters_step.dag_version_obj",
          "panel_name.$": "$.get_ssm_parameters_step.panel_name",
          "case_metadata.$": "$.workflow_inputs.payload.data.inputs.caseMetadata",
          "data_files.$": "$.workflow_inputs.payload.data.inputs.dataFiles",
          "samplesheet_uri.$": "$.workflow_inputs.payload.data.inputs.dataFiles.samplesheetUri",
          "sequencerrun_s3_path_root": "${__sequencerrun_s3_path_root__}",
          "instrument_run_id.$": "$.workflow_inputs.payload.data.inputs.instrumentRunId",
          "portal_run_id.$": "$.workflow_inputs.portalRunId"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException",
            "States.TaskFailed"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.generate_pieriandx_objects_step",
      "ResultSelector": {
        "case_creation_obj.$": "$.Payload.case_creation_obj",
        "sequencerrun_creation_obj.$": "$.Payload.sequencerrun_creation_obj",
        "informaticsjob_creation_obj.$": "$.Payload.informaticsjob_creation_obj",
        "data_files.$": "$.Payload.data_files",
        "sequencerrun_s3_path.$": "$.Payload.sequencerrun_s3_path",
        "sample_name.$": "$.Payload.sample_name"
      },
      "Next": "add_pieriandx_db_entries"
    },
    "add_pieriandx_db_entries": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "add_case_accession_number_partition_key",
          "States": {
            "add_case_accession_number_partition_key": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Item": {
                  "id.$": "$.workflow_inputs.payload.data.inputs.caseMetadata.caseAccessionNumber",
                  "id_type": "case_accession_number",
                  "portal_run_id": {
                    "S.$": "$.workflow_inputs.portalRunId"
                  }
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "add_portal_run_id_partition_key",
          "States": {
            "add_portal_run_id_partition_key": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Item": {
                  "id.$": "$.workflow_inputs.portalRunId",
                  "id_type": "portal_run_id",
                  "state_machine_execution_arn": {
                    "S.$": "$$.Execution.Id"
                  },
                  "workflow_run_name": {
                    "S.$": "$.workflow_inputs.workflowRunName"
                  },
                  "linked_libraries": {
                    "S.$": "States.JsonToString($.workflow_inputs.linkedLibraries)"
                  },
                  "case_accession_number": {
                    "S.$": "$.workflow_inputs.payload.data.inputs.caseMetadata.caseAccessionNumber"
                  },
                  "event_inputs": {
                    "S.$": "States.JsonToString($.workflow_inputs.payload.data.inputs)"
                  },
                  "engine_parameters": {
                    "S.$": "States.JsonToString($.workflow_inputs.payload.data.engineParameters)"
                  },
                  "tags": {
                    "S.$": "States.JsonToString($.workflow_inputs.payload.data.tags)"
                  },
                  "data_files": {
                    "S.$": "States.JsonToString($.generate_pieriandx_objects_step.data_files)"
                  },
                  "sample_name": {
                    "S.$": "$.generate_pieriandx_objects_step.sample_name"
                  },
                  "samplesheet_uri": {
                    "S.$": "$.workflow_inputs.payload.data.inputs.dataFiles.samplesheetUri"
                  },
                  "sequencerrun_s3_path": {
                    "S.$": "$.generate_pieriandx_objects_step.sequencerrun_s3_path"
                  },
                  "case_creation_obj": {
                    "S.$": "States.JsonToString($.generate_pieriandx_objects_step.case_creation_obj)"
                  },
                  "case_id": {
                    "N": "-1"
                  },
                  "sequencerrun_creation_obj": {
                    "S.$": "States.JsonToString($.generate_pieriandx_objects_step.sequencerrun_creation_obj)"
                  },
                  "sequencerrun_id": {
                    "N": "-1"
                  },
                  "informaticsjob_creation_obj": {
                    "S.$": "States.JsonToString($.generate_pieriandx_objects_step.informaticsjob_creation_obj)"
                  },
                  "informaticsjob_id": {
                    "N": "-1"
                  },
                  "report_id": {
                    "N": "-1"
                  },
                  "job_status": {
                    "S": ""
                  },
                  "report_status": {
                    "S": ""
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.add_pieriandx_db_entries_step",
      "Next": "wait_one_second"
    },
    "wait_one_second": {
      "Type": "Wait",
      "Seconds": 1,
      "Comment": "Allow the database to sync\n",
      "Next": "create_pieriandx_prelaunch_objects"
    },
    "create_pieriandx_prelaunch_objects": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "create_case_execution",
          "States": {
            "create_case_execution": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": "${__create_case_sfn__}",
                "Input": {
                  "portal_run_id.$": "$.workflow_inputs.portalRunId"
                }
              },
              "ResultPath": "$.create_case_execution_step",
              "End": true
            }
          }
        },
        {
          "StartAt": "create_sequencerrun_execution",
          "States": {
            "create_sequencerrun_execution": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": "${__create_sequencerrun_sfn__}",
                "Input": {
                  "portal_run_id.$": "$.workflow_inputs.portalRunId"
                }
              },
              "ResultPath": "$.create_sequencerrun_execution_step",
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.create_pieriandx_prelaunch_objects_step",
      "Next": "create_informaticsjob_execution"
    },
    "create_informaticsjob_execution": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${__create_informaticsjob_sfn__}",
        "Input": {
          "portal_run_id.$": "$.workflow_inputs.portalRunId"
        }
      },
      "ResultPath": "$.create_informaticsjob_execution_step",
      "Next": "Get Portal Run Id"
    },
    "Get Portal Run Id": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.workflow_inputs.portalRunId",
          "id_type": "portal_run_id"
        }
      },
      "Next": "Set engine parameters",
      "ResultPath": "$.get_portal_run_id_db_step"
    },
    "Set engine parameters": {
      "Type": "Pass",
      "Next": "Update dbs",
      "ResultPath": "$.set_engine_parameters_step",
      "Parameters": {
        "engine_parameters.$": "States.JsonMerge($.workflow_inputs.payload.data.engineParameters, States.StringToJson(States.Format('\\{\"{}\":\"{}\",\"{}\":\"{}\"\\}', 'caseId', $.get_portal_run_id_db_step.Item.case_id.N, 'informaticsJobId', $.get_portal_run_id_db_step.Item.informaticsjob_id.N)), false)"
      }
    },
    "Update dbs": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Register running informatics job",
          "States": {
            "Register running informatics job": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Item": {
                  "id.$": "$.workflow_inputs.portalRunId",
                  "id_type": "running_jobs",
                  "case_id": {
                    "N.$": "States.Format('{}', $.get_portal_run_id_db_step.Item.case_id.N)"
                  },
                  "informaticsjob_id": {
                    "N.$": "States.Format('{}', $.get_portal_run_id_db_step.Item.informaticsjob_id.N)"
                  },
                  "report_id": {
                    "N": "-1"
                  },
                  "job_status": {
                    "S": "waiting"
                  },
                  "report_status": {
                    "S": ""
                  },
                  "workflow_status": {
                    "S": "RUNNING"
                  }
                }
              },
              "ResultPath": null,
              "End": true
            }
          }
        },
        {
          "StartAt": "Update engine parameters",
          "States": {
            "Update engine parameters": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.workflow_inputs.portalRunId",
                  "id_type": "portal_run_id"
                },
                "UpdateExpression": "SET engine_parameters = :engine_parameters",
                "ExpressionAttributeValues": {
                  ":engine_parameters": {
                    "S.$": "States.JsonToString($.set_engine_parameters_step.engine_parameters)"
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": null,
      "Next": "Initialised PierianDx Job"
    },
    "Initialised PierianDx Job": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "DetailType": "${__event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}",
            "Detail": {
              "portalRunId.$": "$.workflow_inputs.portalRunId",
              "timestamp.$": "$$.State.EnteredTime",
              "status": "RUNNING",
              "workflowName": "${__workflow_name__}",
              "workflowVersion": "${__workflow_version__}",
              "workflowRunName.$": "$.workflow_inputs.workflowRunName",
              "linkedLibraries.$": "$.workflow_inputs.linkedLibraries",
              "payload": {
                "version": "${__payload_version__}",
                "data": {
                  "inputs.$": "$.workflow_inputs.payload.data.inputs",
                  "engineParameters.$": "$.set_engine_parameters_step.engine_parameters",
                  "tags.$": "$.workflow_inputs.payload.data.tags"
                }
              }
            }
          }
        ]
      },
      "End": true
    }
  }
}
