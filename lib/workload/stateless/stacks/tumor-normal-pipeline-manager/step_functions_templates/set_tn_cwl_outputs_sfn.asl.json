{
  "Comment": "Get CWL Outputs from WGTS Alignment QC",
  "StartAt": "Get DB Attributes",
  "States": {
    "Get DB Attributes": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        }
      },
      "Next": "Set outputs from analysis uri",
      "ResultSelector": {
        "ready_event_data_inputs.$": "States.StringToJson($.Item.ready_event_data_inputs.S)",
        "engine_parameters.$": "States.StringToJson($.Item.engine_parameters.S)"
      },
      "ResultPath": "$.get_db_attributes_step"
    },
    "Set outputs from analysis uri": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__set_outputs_json_lambda_function_arn__}",
        "Payload": {
          "somatic_output_prefix.$": "$.get_db_attributes_step.ready_event_data_inputs.outputPrefixSomatic",
          "germline_output_prefix.$": "$.get_db_attributes_step.ready_event_data_inputs.outputPrefixGermline",
          "analysis_output_uri.$": "$.get_db_attributes_step.engine_parameters.outputUri"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException",
            "States.TaskFailed"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "TimeoutSeconds": 60,
      "ResultSelector": {
        "output_json": {
          "dragenGermlineOutputUri.$": "$.Payload.dragen_germline_output",
          "dragenGermlineSnvVcfUri.$": "$.Payload.dragen_germline_snv_vcf",
          "dragenGermlineSnvVcfHardFilteredUri.$": "$.Payload.dragen_germline_snv_vcf_hard_filtered",
          "dragenGermlineBamUri.$": "$.Payload.dragen_germline_bam",
          "dragenSomaticOutputUri.$": "$.Payload.dragen_somatic_output",
          "dragenSomaticSnvVcfUri.$": "$.Payload.dragen_somatic_snv_vcf",
          "dragenSomaticSnvVcfHardFilteredUri.$": "$.Payload.dragen_somatic_snv_vcf_hard_filtered",
          "dragenSomaticSvVcfUri.$": "$.Payload.dragen_somatic_sv_vcf",
          "dragenSomaticBamUri.$": "$.Payload.dragen_somatic_bam",
          "multiqcOutputUri.$": "$.Payload.multiqc_output",
          "multiqcHtmlReportUri.$": "$.Payload.multiqc_html_report"
        }
      },
      "ResultPath": "$.analysis_outputs_step",
      "Next": "Update Database entry"
    },
    "Update Database entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        },
        "UpdateExpression": "SET analysis_output = :output_json",
        "ExpressionAttributeValues": {
          ":output_json": {
            "S.$": "States.JsonToString($.analysis_outputs_step.output_json)"
          }
        }
      },
      "ResultPath": "$.update_entry_post_launch_step",
      "Next": "Wait 1 Second (Post database-updates)"
    },
    "Wait 1 Second (Post database-updates)": {
      "Type": "Wait",
      "Seconds": 1,
      "Comment": "Wait for databases to sync before continuing",
      "End": true
    }
  }
}
