{
  "Comment": "Launch Icav2 Pipeline and log in db",
  "StartAt": "Get DataBase Entry",
  "States": {
    "Get DataBase Entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        }
      },
      "ResultSelector": {
        "inputs.$": "States.StringToJson($.Item.ready_event_data_inputs.S)",
        "engine_parameters.$": "States.StringToJson($.Item.engine_parameters.S)"
      },
      "ResultPath": "$.get_input_parameters_from_event",
      "Next": "Has ORA Reference URI set"
    },
    "Has ORA Reference URI set": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get_input_parameters_from_event.inputs.oraReferenceUri",
          "IsPresent": false,
          "Next": "Get ORA Reference URI",
          "Comment": "Reference parameter not set"
        }
      ],
      "Default": "Set ORA Reference URI"
    },
    "Get ORA Reference URI": {
      "Type": "Task",
      "Parameters": {
        "Name": "${__reference_uri_ssm_parameter_path__}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.get_ora_reference_uri_step",
      "ResultSelector": {
        "ora_reference_uri.$": "$.Parameter.Value"
      },
      "Next": "Set Input Json from Event Payload"
    },
    "Set ORA Reference URI": {
      "Type": "Pass",
      "Parameters": {
        "ora_reference_uri.$": "$.get_input_parameters_from_event.inputs.oraReferenceUri"
      },
      "ResultPath": "$.get_ora_reference_uri_step",
      "Next": "Set Input Json from Event Payload"
    },
    "Set Input Json from Event Payload": {
      "Type": "Pass",
      "Parameters": {
        "input_json": {
          "instrument_run_directory": {
            "class": "Directory",
            "basename.$": "$.portal_run_id",
            "location.$": "$.get_input_parameters_from_event.inputs.instrumentRunDirectoryUri"
          },
          "ora_reference": {
            "class": "File",
            "location.$": "$.get_ora_reference_uri_step.ora_reference_uri"
          },
          "ora_print_file_info": true
        }
      },
      "ResultPath": "$.set_input_json",
      "Next": "Update Database Entry"
    },
    "Update Database Entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        },
        "UpdateExpression": "SET input_json = :input_json",
        "ExpressionAttributeValues": {
          ":input_json": {
            "S.$": "States.JsonToString($.set_input_json.input_json)"
          }
        }
      },
      "ResultPath": "$.update_entry_post_launch_step",
      "Next": "Wait 1 Second (Pre-execution)"
    },
    "Wait 1 Second (Pre-execution)": {
      "Type": "Wait",
      "Seconds": 1,
      "Comment": "Wait for databases to sync before continuing",
      "Next": "Get Raw Md5sums"
    },
    "Get Raw Md5sums": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get V2 Samplesheets",
          "States": {
            "Get V2 Samplesheets": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__get_v2_samplesheets_uri_lambda_function_arn__}",
                "Payload": {
                  "instrument_run_folder_uri.$": "$.get_input_parameters_from_event.inputs.instrumentRunDirectoryUri",
                  "instrument_run_id.$": "$.get_input_parameters_from_event.inputs.instrumentRunId"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "ResultSelector": {
                "rgid_pairs_list.$": "$.Payload"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Find Fastq Pairs",
          "States": {
            "Find Fastq Pairs": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__find_fastq_pairs_lambda_function_arn__}",
                "Payload": {
                  "instrument_run_folder_uri.$": "$.get_input_parameters_from_event.inputs.instrumentRunDirectoryUri",
                  "instrument_run_id.$": "$.get_input_parameters_from_event.inputs.instrumentRunId"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "ResultSelector": {
                "rgid_files_list.$": "$.Payload"
              },
              "End": true
            }
          }
        }
      ],
      "ResultSelector": {
        "rgids_in_samplesheet.$": "$.[0].rgid_pairs_list",
        "rgids_files_list.$": "$.[1].rgid_files_list"
      },
      "ResultPath": "$.get_rgid_pairs",
      "Next": "Merge on partial rgids"
    },
    "Merge on partial rgids": {
      "Type": "Map",
      "ItemsPath": "$.get_rgid_pairs.rgids_in_samplesheet",
      "ItemSelector": {
        "rgid_pair.$": "$$.Map.Item.Value",
        "rgids_files_list.$": "$.get_rgid_pairs.rgids_files_list",
        "cache_uri_prefix.$": "$.get_input_parameters_from_event.engine_parameters.cacheUri"
      },
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get rgid files",
        "States": {
          "Get rgid files": {
            "Type": "Pass",
            "Parameters": {
              "rgid_files_list.$": "States.ArrayGetItem($.rgids_files_list[?(@.rgid_partial == $.rgid_pair.rgid_partial)], 0)"
            },
            "ResultPath": "$.get_rgid_files_step",
            "Next": "Merge JSONs"
          },
          "Merge JSONs": {
            "Type": "Pass",
            "Parameters": {
              "fastq_pair_obj": {
                "rgid.$": "$.rgid_pair.rgid",
                "rgid_partial.$": "$.rgid_pair.rgid_partial",
                "read1_file_uri.$": "$.get_rgid_files_step.rgid_files_list.read_1_file_uri",
                "read2_file_uri.$": "$.get_rgid_files_step.rgid_files_list.read_2_file_uri"
              }
            },
            "ResultPath": "$.get_fastq_pair_obj_step",
            "Next": "Update Cache URI for rgid"
          },
          "Update Cache URI for rgid": {
            "Type": "Pass",
            "Parameters": {
              "cache_uri.$": "States.Format('{}{}/', $.cache_uri_prefix, $.get_fastq_pair_obj_step.fastq_pair_obj.rgid)"
            },
            "ResultPath": "$.get_cache_uri_step",
            "Next": "Initialise RGID"
          },
          "Initialise RGID": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:putItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Item": {
                "id.$": "$.get_fastq_pair_obj_step.fastq_pair_obj.rgid",
                "id_type": "${__fastq_list_row_table_partition_name__}",
                "rgid_partial": {
                  "S.$": "$.get_fastq_pair_obj_step.fastq_pair_obj.rgid_partial"
                },
                "read1_gz_file_uri": {
                  "S.$": "$.get_fastq_pair_obj_step.fastq_pair_obj.read1_file_uri"
                },
                "read2_gz_file_uri": {
                  "S.$": "$.get_fastq_pair_obj_step.fastq_pair_obj.read2_file_uri"
                },
                "cache_uri": {
                  "S.$": "$.get_cache_uri_step.cache_uri"
                }
              }
            },
            "End": true
          }
        }
      },
      "Next": "Put Instrument Run ID Item",
      "ResultPath": null
    },
    "Put Instrument Run ID Item": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Item": {
          "id.$": "$.get_input_parameters_from_event.inputs.instrumentRunId",
          "id_type": "${__instrument_run_id_table_partition_name__}",
          "rgid_list": {
            "SS.$": "$.get_rgid_pairs.rgids_in_samplesheet[*].rgid"
          }
        }
      },
      "ResultPath": null,
      "Next": "Rate Limit Get Raw MD5sums for fastq gzip run"
    },
    "Rate Limit Get Raw MD5sums for fastq gzip run": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${__rate_limit_get_raw_md5sums_gzip_sfn_arn__}",
        "Input": {}
      },
      "ResultPath": null,
      "Next": "Get Raw MD5sums for fastq gzip pair"
    },
    "Get Raw MD5sums for fastq gzip pair": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${__get_raw_md5sums_for_fastq_gzip_pair_sfn_arn__}",
        "Input": {
          "rgid_list.$": "$.get_rgid_pairs.rgids_in_samplesheet"
        }
      },
      "End": true
    }
  }
}
