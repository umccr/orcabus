{
  "Comment": "Get CWL Outputs from BCLConvert InterOp QC pipeline",
  "StartAt": "Get DB Attributes",
  "States": {
    "Get DB Attributes": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        }
      },
      "ResultSelector": {
        "ready_event_data_inputs.$": "States.StringToJson($.Item.ready_event_data_inputs.S)",
        "analysis_output_uri.$": "$.Item.analysis_output_uri.S"
      },
      "ResultPath": "$.get_db_attributes_step",
      "Next": "Set outputs from analysis uri"
    },
    "Set outputs from analysis uri": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__set_outputs_json_lambda_function_arn__}",
        "Payload": {
          "portal_run_id.$": "$.portal_run_id",
          "analysis_output_uri.$": "$.get_db_attributes_step.analysis_output_uri"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "TimeoutSeconds": 60,
      "ResultSelector": {
        "output_json": {
          "instrumentRunOraOutputUri.$": "$.Payload.instrument_run_ora_output_uri"
        }
      },
      "ResultPath": "$.analysis_outputs_step",
      "Next": "Update analysisOutput column in DB"
    },
    "Update analysisOutput column in DB": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        },
        "UpdateExpression": "SET analysis_output = :output_json",
        "ExpressionAttributeValues": {
          ":output_json": {
            "S.$": "States.JsonToString($.analysis_outputs_step.output_json)"
          }
        }
      },
      "ResultPath": "$.update_entry_post_launch_step",
      "Next": "Get RGIDs from DB"
    },
    "Get RGIDs from DB": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_db_attributes_step.ready_event_data_inputs.tags.instrumentRunId",
          "id_type": "${__instrument_run_id_table_partition_name__}"
        }
      },
      "ResultSelector": {
        "rgids.$": "$.Item.rgid_list.SS"
      },
      "ResultPath": "$.get_rgids_from_db_step",
      "Next": "Merge fastq list csv with rgids"
    },
    "Merge fastq list csv with rgids": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__merge_fastq_list_csv_with_rgid_lambda_function_arn__}",
        "Payload": {
          "rgids.$": "$.get_rgids_from_db_step.rgids",
          "output_dir_uri.$": "$.analysis_outputs_step.output_json.instrumentRunOraOutputUri"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "ResultSelector": {
        "fastq_ora_file_ora_by_rgid.$": "$.Payload"
      },
      "ResultPath": "$.merge_rgids_step",
      "Next": "Validate Fastq Outputs"
    },
    "Validate Fastq Outputs": {
      "Type": "Map",
      "ItemsPath": "$.merge_rgids_step.fastq_ora_file_ora_by_rgid",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get Raw md5sums for rgid",
        "States": {
          "Get Raw md5sums for rgid": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:getItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.rgid",
                "id_type": "${__fastq_list_row_table_partition_name__}"
              }
            },
            "ResultPath": "$.get_raw_md5sums_for_rgid_step",
            "Next": "Update fastq list row partition with ora outputs"
          },
          "Update fastq list row partition with ora outputs": {
            "Type": "Task",
            "Resource": "arn:aws:states:::dynamodb:updateItem",
            "Parameters": {
              "TableName": "${__table_name__}",
              "Key": {
                "id.$": "$.rgid",
                "id_type": "${__fastq_list_row_table_partition_name__}"
              },
              "UpdateExpression": "SET read1_ora_file_uri = :read1OraFileUri, read2_ora_file_uri = :read2OraFileUri",
              "ExpressionAttributeValues": {
                ":read1OraFileUri": {
                  "S.$": "$.read_1_file_uri"
                },
                ":read2OraFileUri": {
                  "S.$": "$.read_2_file_uri"
                }
              }
            },
            "ResultPath": null,
            "Next": "Step Functions StartExecution"
          },
          "Step Functions StartExecution": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync:2",
            "Parameters": {
              "StateMachineArn": "${__ora_validation_sfn_arn__}",
              "Input": {
                "read1OraFileUri.$": "$.read_1_file_uri",
                "read2OraFileUri.$": "$.read_2_file_uri",
                "read1RawMd5sum.$": "$.get_raw_md5sums_for_rgid_step.Item.read1_raw_md5sum.S",
                "read2RawMd5sum.$": "$.get_raw_md5sums_for_rgid_step.Item.read2_raw_md5sum.S",
                "validationOnly": true
              }
            },
            "End": true
          }
        }
      },
      "Next": "Wait 1 Second (Post-update)"
    },
    "Wait 1 Second (Post-update)": {
      "Type": "Wait",
      "Seconds": 1,
      "Comment": "Wait for databases to sync before continuing",
      "End": true
    }
  }
}
