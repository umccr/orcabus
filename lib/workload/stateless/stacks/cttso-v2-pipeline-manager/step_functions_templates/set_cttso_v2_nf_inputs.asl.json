{
  "Comment": "Set ctTSOv2 Input JSON",
  "StartAt": "Get Database entry",
  "States": {
    "Get Database entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        }
      },
      "ResultPath": "$.get_ready_event_step",
      "ResultSelector": {
        "inputs.$": "States.StringToJson($.Item.ready_event_data_inputs.S)",
        "engine_parameters.$": "States.StringToJson($.Item.engine_parameters.S)"
      },
      "Next": "Update Entry Pre-Fastq Copy"
    },
    "Update Entry Pre-Fastq Copy": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        },
        "UpdateExpression": "SET analysis_status = :analysis_status",
        "ExpressionAttributeValues": {
          ":analysis_status": {
            "S": "CACHE_COPY_IN_PROGRESS"
          }
        }
      },
      "ResultPath": "$.update_entry_pre_fastq",
      "Next": "Copy Files to Cache Directory"
    },
    "Copy Files to Cache Directory": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Upload SampleSheet to Cache Path",
          "States": {
            "Upload SampleSheet to Cache Path": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__upload_samplesheet_to_cache_dir__}",
                "Payload": {
                  "cache_uri.$": "$.get_ready_event_step.engine_parameters.cacheUri",
                  "samplesheet.$": "$.get_ready_event_step.inputs.samplesheet"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true,
              "Comment": "We expect the inputs to be:\n\n* project_id\n* samplesheet_dict_b64gz\n\nWe expect the outputs to be:\n\n\n\n",
              "ResultPath": "$.upload_samplesheet_to_cache_path_step",
              "ResultSelector": {
                "samplesheet_file_id.$": "$.Payload.samplesheet_file_id",
                "samplesheet_file_uri.$": "$.Payload.samplesheet_file_uri"
              }
            }
          }
        },
        {
          "StartAt": "Generate Copy Manifest",
          "States": {
            "Generate Copy Manifest": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__generate_copy_manifest_dict__}",
                "Payload": {
                  "sample_id.$": "$.get_ready_event_step.inputs.sampleId",
                  "cache_uri.$": "$.get_ready_event_step.engine_parameters.cacheUri",
                  "fastq_list_rows.$": "$.get_ready_event_step.inputs.fastqListRows"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Get Variable number of seconds",
              "Comment": "Generate a copy manifest object, ready to parse into the icav2 copy batch utility step function\n\nWe expect the following inputs:\n\n* cache_path\n* project_id\n* sample_id\n* fastq_list_rows\n\nAnd we expect the following outputs:\n\n* manifest",
              "ResultSelector": {
                "dest_uri.$": "$.Payload.dest_uri",
                "source_uris.$": "$.Payload.source_uris"
              },
              "ResultPath": "$.generate_copy_manifest_dict_step"
            },
            "Get Variable number of seconds": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__get_variable_number_of_seconds_lambda_function_arn__}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "num_seconds.$": "$.Payload.random_number"
              },
              "ResultPath": "$.get_variable_seconds_step",
              "Next": "Wait a variable amount of time"
            },
            "Wait a variable amount of time": {
              "Type": "Wait",
              "SecondsPath": "$.get_variable_seconds_step.num_seconds",
              "Next": "Check Running Copy Fastq Job Number"
            },
            "Check Running Copy Fastq Job Number": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__check_number_of_copy_jobs_running_lambda_function_arn__}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "run_copy_job_step_bool.$": "$.Payload.run_copy_job_step_bool"
              },
              "ResultPath": "$.run_copy_job_step",
              "Next": "Allowed to run"
            },
            "Allowed to run": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.run_copy_job_step.run_copy_job_step_bool",
                  "BooleanEquals": false,
                  "Next": "Wait A Minute",
                  "Comment": "Too Many jobs running already"
                }
              ],
              "Default": "Copy Fastq Files to Cache Directory"
            },
            "Wait A Minute": {
              "Type": "Wait",
              "Seconds": 60,
              "Next": "Check Running Copy Fastq Job Number"
            },
            "Copy Fastq Files to Cache Directory": {
              "Type": "Task",
              "End": true,
              "Parameters": {
                "StateMachineArn": "${__copy_icav2_files_state_machine_arn__}",
                "Input": {
                  "dest_uri.$": "$.generate_copy_manifest_dict_step.dest_uri",
                  "source_uris.$": "$.generate_copy_manifest_dict_step.source_uris"
                }
              },
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "ResultPath": "$.copy_fastq_files_to_cache_directory_step",
              "ResultSelector": {
                "job_id.$": "$.Output.job_id"
              }
            }
          }
        }
      ],
      "Next": "Update DB Entry (post-fastq copy)",
      "ResultSelector": {
        "samplesheet_file_id.$": "$.[0].upload_samplesheet_to_cache_path_step.samplesheet_file_id",
        "samplesheet_file_uri.$": "$.[0].upload_samplesheet_to_cache_path_step.samplesheet_file_uri",
        "copy_job_id.$": "$.[1].copy_fastq_files_to_cache_directory_step.job_id"
      },
      "ResultPath": "$.copy_files_to_cache_directory_step"
    },
    "Update DB Entry (post-fastq copy)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        },
        "UpdateExpression": "SET analysis_status = :analysis_status",
        "ExpressionAttributeValues": {
          ":analysis_status": {
            "S": "CACHE_COPY_COMPLETE"
          }
        }
      },
      "ResultPath": "$.update_entry_post_fastq",
      "Next": "Set Input JSON Payload"
    },
    "Set Input JSON Payload": {
      "Type": "Pass",
      "Parameters": {
        "input_json": {
          "run_folder.$": "$.get_ready_event_step.engine_parameters.cacheUri",
          "sample_sheet.$": "$.copy_files_to_cache_directory_step.samplesheet_file_uri",
          "sample_pair_ids.$": "$.get_ready_event_step.inputs.sampleId",
          "StartsFromFastq": true
        }
      },
      "ResultPath": "$.set_input_json",
      "Next": "Update InputJSON in Database"
    },
    "Update InputJSON in Database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.portal_run_id",
          "id_type": "portal_run_id"
        },
        "UpdateExpression": "SET input_json = :input_json",
        "ExpressionAttributeValues": {
          ":input_json": {
            "S.$": "States.JsonToString($.set_input_json.input_json)"
          }
        }
      },
      "ResultPath": "$.update_entry_post_launch_step",
      "Next": "Wait 1 Second (Pre-execution)"
    },
    "Wait 1 Second (Pre-execution)": {
      "Type": "Wait",
      "Seconds": 1,
      "Comment": "Wait for databases to sync before continuing",
      "End": true
    }
  }
}
