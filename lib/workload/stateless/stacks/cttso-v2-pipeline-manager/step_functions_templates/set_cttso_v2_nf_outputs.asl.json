{
  "Comment": "Get CWL Outputs from BCLConvert InterOp QC pipeline",
  "StartAt": "Delete Cache and Set Outputs JSON",
  "States": {
    "Delete Cache and Set Outputs JSON": {
      "Type": "Parallel",
      "Next": "Wait 1 Second (Post database-updates)",
      "Branches": [
        {
          "StartAt": "Get Cache URI from Database",
          "States": {
            "Get Cache URI from Database": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.db_uuid",
                  "id_type": "db_uuid"
                }
              },
              "Next": "Delete Cache Uri",
              "ResultSelector": {
                "event_payload.$": "States.StringToJson($.Item.launch_event_payload.S)"
              },
              "ResultPath": "$.get_event_payload_step"
            },
            "Delete Cache Uri": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${__delete_cache_uri_lambda_function_arn__}",
                "Payload": {
                  "sample_id.$": "$.get_event_payload_step.event_payload.sampleId",
                  "cache_uri.$": "$.get_event_payload_step.event_payload.cacheUri"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "TimeoutSeconds": 60,
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Output URI",
          "States": {
            "Get Output URI": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.db_uuid",
                  "id_type": "db_uuid"
                }
              },
              "ResultSelector": {
                "event_payload.$": "States.StringToJson($.Item.launch_event_payload.S)",
                "analysis_output_uri.$": "$.Item.analysis_output_uri.S"
              },
              "ResultPath": "$.get_analysis_output_uri_step",
              "Next": "Set outputs from analysis uri"
            },
            "Set outputs from analysis uri": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__set_outputs_json_lambda_function_arn__}",
                "Payload": {
                  "sample_id.$": "$.get_analysis_output_uri_step.event_payload.sampleId",
                  "analysis_output_uri.$": "$.get_analysis_output_uri_step.analysis_output_uri"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "TimeoutSeconds": 60,
              "ResultSelector": {
                "output_json": {
                  "resultsDir.$": "$.Payload.results_dir",
                  "logsIntermediatesDir.$": "$.Payload.logs_intermediates_dir",
                  "tso500NextflowLogs.$": "$.Payload.nextflow_logs_dir",
                  "samplePassed.$": "$.Payload.sample_passed"
                }
              },
              "ResultPath": "$.analysis_outputs_step",
              "Next": "Update Database entry"
            },
            "Update Database entry": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id": {
                    "S.$": "$.db_uuid"
                  },
                  "id_type": "db_uuid"
                },
                "UpdateExpression": "SET analysis_output = :output_json",
                "ExpressionAttributeValues": {
                  ":output_json": {
                    "S.$": "States.JsonToString($.analysis_outputs_step.output_json)"
                  }
                }
              },
              "ResultPath": "$.update_entry_post_launch_step",
              "End": true
            }
          }
        }
      ]
    },
    "Wait 1 Second (Post database-updates)": {
      "Type": "Wait",
      "Seconds": 1,
      "Comment": "Wait for databases to sync before continuing",
      "End": true
    }
  }
}
