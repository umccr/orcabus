//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0-rc.1
use super::sea_orm_active_enums::EventType;
use super::sea_orm_active_enums::StorageClass;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa::ToSchema,
)]
#[sea_orm(table_name = "s3_object")]
#[serde(rename_all = "camelCase")]
#[schema(as = S3)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub s3_object_id: Uuid,
    pub event_type: EventType,
    #[sea_orm(column_type = "Text")]
    pub bucket: String,
    #[sea_orm(column_type = "Text")]
    pub key: String,
    #[sea_orm(column_type = "Text")]
    pub version_id: String,
    pub event_time: Option<DateTimeWithTimeZone>,
    pub size: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub sha256: Option<String>,
    pub last_modified_date: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub e_tag: Option<String>,
    pub storage_class: Option<StorageClass>,
    #[sea_orm(column_type = "Text", nullable)]
    pub sequencer: Option<String>,
    pub is_delete_marker: bool,
    pub number_duplicate_events: i64,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub attributes: Option<Json>,
    pub deleted_date: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_type = "Text", nullable)]
    pub deleted_sequencer: Option<String>,
    pub number_reordered: i64,
    pub move_id: Option<Uuid>,
}
#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}
impl ActiveModelBehavior for ActiveModel {}
