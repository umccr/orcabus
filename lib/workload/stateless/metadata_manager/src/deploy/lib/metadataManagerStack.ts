import { Stack, StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { EdgeDbConstruct } from '../construct/edge-db/edge-db-construct';
import { Vpc } from 'aws-cdk-lib/aws-ec2';
import { Secret } from 'aws-cdk-lib/aws-secretsmanager';
import { ServerlessBaseDatabase } from '../construct/postgres-rds/postgres-db-construct';
import { PostgresCommon } from '../construct/postgres-rds/infrastructure-stack-database-props';
import { AppConstruct, appConfigurationProps } from '../construct/app/app-construct';

export interface EdgeDbCommon {
  secretPrefix: string;
  /**
   * The version string of EdgeDb that will be used for the spun up EdgeDb image
   */
  readonly version: string;

  /**
   * The memory assigned to the Edge Db service - defaults to a sensible value
   */
  readonly memoryLimitMiB?: number;

  /**
   * The cpu assigned to the Edge Db service - defaults to a sensible value
   */
  readonly cpu?: number;

  /**
   * The port number to assign for EdgeDb protocol - defaults to 5656 which
   * is what is assumed for edgedb connections
   */
  readonly dbPort?: number;
}

export interface MetadataManagerStackProps extends StackProps {
  database: PostgresCommon;
  edgeDb: EdgeDbCommon;
  network: {
    vpcName: string;
  };
  appConfiguration: appConfigurationProps;
}

export class MetadataManagerStack extends Stack {
  constructor(scope: Construct, id: string, props: MetadataManagerStackProps) {
    super(scope, id, props);

    const vpc = Vpc.fromLookup(this, 'mainVpc', { vpcName: props.network.vpcName });

    // create a new secret for our base database with an autogenerated password
    const postgresSecret = new Secret(this, `Secret`, {
      description: `For database ${props.database.name} - secret containing RDS details such as admin username and password`,
      generateSecretString: {
        excludePunctuation: true,
        secretStringTemplate: JSON.stringify({
          username: props.database.adminUser,
          password: '',
        }),
        generateStringKey: 'password',
      },
    });
    const postgresDb = new ServerlessBaseDatabase(this, 'metadataManagerRds', {
      vpc: vpc,
      databaseName: props.database.name,
      secret: postgresSecret,
      ...props.database,
    });

    /**
     * Create EdgeDb server
     */
    const edgeDb = new EdgeDbConstruct(this, `EdgeDb`, {
      vpc: vpc,
      rdsDatabaseDisplayName: props.database.name,
      secretsPrefix: props.edgeDb.secretPrefix,
      edgeDbService: {
        // Postgres Config
        postgresDsn: postgresDb.dsnWithTokens,
        postgresSecurityGroup: postgresDb.securityGroup,

        // edge db Config
        databaseName: 'orcabus',
        superUser: 'orcabus_superuser',
        edgeDbVersion: props.edgeDb.version,
        desiredCount: 1,
        cpu: props.edgeDb.cpu ?? 1024,
        memory: props.edgeDb.memoryLimitMiB ?? 2048,
      },
      edgeDbLoadBalancerProtocol: {
        tcpPassthroughPort: props.edgeDb.dbPort || 5656,
      },
    });

    new AppConstruct(this, 'app', {
      edgedDb: {
        dsnNoPassword: edgeDb.dsnForEnvironmentVariable,
        secret: edgeDb.passwordSecret,
        securityGroup: edgeDb.securityGroup,
      },
      network: {
        vpc: vpc,
      },
      configuration: props.appConfiguration,
    });
  }
}
