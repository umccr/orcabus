{
  "Comment": "Deploy a set of ICAv2 copy batch jobs and wait until theyre finished",
  "StartAt": "Move inputs",
  "States": {
    "Move inputs": {
      "Type": "Pass",
      "Parameters": {
        "workflow_inputs.$": "$"
      },
      "Next": "Flip Manifest"
    },
    "Flip Manifest": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__manifest_inverter_lambda_arn__}",
        "Payload.$": "$"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.manifest_inverted_step",
      "TimeoutSeconds": 20,
      "InputPath": "$.workflow_inputs",
      "ResultSelector": {
        "manifest_inverted.$": "$.Payload"
      },
      "Next": "Initialise Job Status Iterable Parameter"
    },
    "Initialise Job Status Iterable Parameter": {
      "Type": "Pass",
      "ResultPath": "$.job_status_iterable_parameter",
      "Result": {
        "job_status_iterable": 0
      },
      "Next": "Initialise Wait Parameter"
    },
    "Initialise Wait Parameter": {
      "Type": "Pass",
      "ResultPath": "$.wait_parameter",
      "Result": {
        "wait": false
      },
      "Next": "Initialise counters"
    },
    "Initialise counters": {
      "Type": "Pass",
      "Parameters": {
        "jobs_passed": 0,
        "jobs_failed": 0,
        "jobs_running.$": "States.ArrayLength($.manifest_inverted_step.manifest_inverted)"
      },
      "ResultPath": "$.counters",
      "Next": "Process Manifest"
    },
    "Process Manifest": {
      "Type": "Map",
      "Iterator": {
        "StartAt": "Launch Copy Job Lambda",
        "States": {
          "Launch Copy Job Lambda": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${__copy_batch_data_lambda_arn__}"
            },
            "TimeoutSeconds": 300,
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "ResultSelector": {
              "dest_uri.$": "$.Payload.dest_uri",
              "source_uris.$": "$.Payload.source_uris",
              "job_attempt_counter.$": "$.Payload.job_attempt_counter",
              "job_id.$": "$.Payload.job_id",
              "failed_jobs_list.$": "$.Payload.failed_jobs_list"
            },
            "End": true
          }
        }
      },
      "ItemsPath": "$.manifest_inverted_step.manifest_inverted",
      "ResultPath": "$.job_list_with_attempt_counter",
      "Next": "Wait 10 seconds before starting job loop"
    },
    "Wait 10 seconds before starting job loop": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "Update Job Statuses"
    },
    "Update Job Statuses": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "job_list.$": "$.job_list_with_attempt_counter",
          "job_list_index.$": "$.job_status_iterable_parameter.job_status_iterable",
          "counters.$": "$.counters"
        },
        "FunctionName": "${__job_status_handler_lambda_arn__}"
      },
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "job_list_with_attempt_counter.$": "$.Payload.job_list",
        "counters.$": "$.Payload.counters",
        "job_status_iterable_parameter": {
          "job_status_iterable.$": "$.Payload.job_list_index"
        },
        "wait_parameter": {
          "wait.$": "$.Payload.wait"
        }
      },
      "Next": "Rerun update wait or finish"
    },
    "Rerun update wait or finish": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.counters.jobs_running",
          "NumericEquals": 0,
          "Next": "Finish"
        },
        {
          "Variable": "$.wait_parameter.wait",
          "BooleanEquals": false,
          "Next": "Update Job Statuses"
        }
      ],
      "Default": "Wait 60 seconds before retrying job status check"
    },
    "Wait 60 seconds before retrying job status check": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "Update Job Statuses"
    },
    "Finish": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.counters.jobs_failed",
          "NumericGreaterThan": 0,
          "Next": "Fail"
        }
      ],
      "Default": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Succeed": {
      "Type": "Succeed"
    }
  }
}