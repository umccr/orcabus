{
  "Comment": "Move inputs to workflow_inputs",
  "StartAt": "move_inputs",
  "States": {
    "move_inputs": {
      "Type": "Pass",
      "Next": "check_portal_run_id_in_db",
      "Parameters": {
        "workflow_inputs.$": "$"
      },
      "Comment": "We expect the inputs:\n* \"samplesheet_b64gz\"\n* \"project_id\"\n* \"portal_run_id\"\n* \"sample_id\"\n* \"fastq_list_rows_b64gz\"\n \"cache_uri\"\n* \"output_uri\"\n* \nPlus the following workflow input parameters\n* user_reference\n* user_tags\n"
    },
    "check_portal_run_id_in_db": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id": {
            "S.$": "$.workflow_inputs.portal_run_id"
          },
          "id_type": {
            "S": "portal_run_id"
          }
        }
      },
      "Next": "is_portal_run_id_in_db",
      "ResultPath": "$.portal_run_id_in_db_step",
      "ResultSelector": {
        "db_response.$": "$"
      }
    },
    "is_portal_run_id_in_db": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.portal_run_id_in_db_step.db_response.Item",
            "IsPresent": true
          },
          "Next": "generate_db_uuid"
        }
      ],
      "Default": "get_database_entry"
    },
    "generate_db_uuid": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__generate_db_uuid__}",
        "Payload": {
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "db_uuid.$": "$.Payload.db_uuid"
      },
      "ResultPath": "$.create_db_uuid_step",
      "Next": "initialise_db_item"
    },
    "initialise_db_item": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Item": {
          "id.$": "$.create_db_uuid_step.db_uuid",
          "id_type": "db_uuid",
          "portal_run_id": {
            "S.$": "$.workflow_inputs.portal_run_id"
          },
          "state_machine_execution_arn": {
            "S.$": "$$.Execution.Id"
          },
          "analysis_status": {
            "S": "PRE_LAUNCH"
          },
          "analysis_id": {
            "S": ""
          },
          "analysis_return_payload": {
            "S": ""
          },
          "analysis_launch_payload": {
            "S": ""
          }
        }
      },
      "ResultPath": "$.dynamo_db_put_item_step",
      "Next": "put_portal_partition_key_item"
    },
    "put_portal_partition_key_item": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Item": {
          "id.$": "$.workflow_inputs.portal_run_id",
          "id_type": "portal_run_id",
          "db_uuid": {
            "S.$": "$.create_db_uuid_step.db_uuid"
          }
        }
      },
      "ResultPath": "$.dynamo_db_put_item_step",
      "Next": "add_technical_tags"
    },
    "add_technical_tags": {
      "Type": "Pass",
      "Parameters": {
        "technical_tags": {
          "portal_run_id.$": "$.workflow_inputs.portal_run_id",
          "step_functions_execution_arn.$": "$$.Execution.Id"
        }
      },
      "ResultPath": "$.add_technical_tags_step",
      "Next": "update_entry_pre_fastq_copy"
    },
    "update_entry_pre_fastq_copy": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.create_db_uuid_step.db_uuid",
          "id_type": "db_uuid"
        },
        "UpdateExpression": "SET analysis_status = :analysis_status",
        "ExpressionAttributeValues": {
          ":analysis_status": {
            "S": "CACHE_COPY_IN_PROGRESS"
          }
        }
      },
      "ResultPath": "$.update_entry_pre_fastq",
      "Next": "copy_files_to_cache_directory"
    },
    "copy_files_to_cache_directory": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "generate_trimmed_samplesheet",
          "States": {
            "generate_trimmed_samplesheet": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__generate_trimmed_samplesheet__}",
                "Payload": {
                  "samplesheet_b64gz.$": "$.workflow_inputs.samplesheet_b64gz",
                  "sample_id.$": "$.workflow_inputs.sample_id"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "upload_samplesheet_to_cache_path",
              "Comment": "We expect the inputs:\n* samplesheet_b64gz\n* sample_id\n\nAnd we provide outputs as \n* samplesheet_b64gz",
              "ResultPath": "$.generate_trimmed_samplesheet_step",
              "ResultSelector": {
                "samplesheet_b64gz.$": "$.Payload.samplesheet_b64gz"
              }
            },
            "upload_samplesheet_to_cache_path": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__upload_samplesheet_to_cache_dir__}",
                "Payload": {
                  "cache_uri.$": "$.workflow_inputs.cache_uri",
                  "samplesheet_dict_b64gz.$": "$.generate_trimmed_samplesheet_step.samplesheet_b64gz"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true,
              "Comment": "We expect the inputs to be:\n\n* project_id\n* samplesheet_dict_b64gz\n\nWe expect the outputs to be:\n\n\n\n",
              "ResultPath": "$.upload_samplesheet_to_cache_path_step",
              "ResultSelector": {
                "samplesheet_file_id.$": "$.Payload.samplesheet_file_id",
                "samplesheet_file_uri.$": "$.Payload.samplesheet_file_uri"
              }
            }
          }
        },
        {
          "StartAt": "generate_copy_manifest",
          "States": {
            "generate_copy_manifest": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${__generate_copy_manifest_dict__}",
                "Payload": {
                  "cache_uri.$": "$.workflow_inputs.cache_uri",
                  "sample_id.$": "$.workflow_inputs.sample_id",
                  "fastq_list_rows_b64gz.$": "$.workflow_inputs.fastq_list_rows_b64gz"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "copy_fastq_files_to_cache_directory",
              "Comment": "Generate a copy manifest object, ready to parse into the icav2 copy batch utility step function\n\nWe expect the following inputs:\n\n* cache_path\n* project_id\n* sample_id\n* fastq_list_rows\n\nAnd we expect the following outputs:\n\n* manifest_list",
              "ResultSelector": {
                "manifest_list.$": "$.Payload.manifest_list"
              },
              "ResultPath": "$.generate_copy_manifest_dict_step"
            },
            "copy_fastq_files_to_cache_directory": {
              "Type": "Task",
              "End": true,
              "Parameters": {
                "StateMachineArn": "${__copy_batch_data_state_machine_arn__}",
                "Input": {
                  "manifest.$": "$.generate_copy_manifest_dict_step.manifest_list"
                }
              },
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "ResultPath": "$.copy_fastq_files_to_cache_directory_step",
              "ResultSelector": {
                "jobs_list.$": "$.Output.job_list_with_attempt_counter"
              }
            }
          }
        }
      ],
      "Next": "update_entry_post_fastq_copy",
      "ResultSelector": {
        "trimmed_samplesheet_b64gz.$": "$.[0].generate_trimmed_samplesheet_step.samplesheet_b64gz",
        "samplesheet_file_id.$": "$.[0].upload_samplesheet_to_cache_path_step.samplesheet_file_id",
        "samplesheet_file_uri.$": "$.[0].upload_samplesheet_to_cache_path_step.samplesheet_file_uri",
        "copy_jobs_list.$": "$.[1].copy_fastq_files_to_cache_directory_step.jobs_list"
      },
      "ResultPath": "$.copy_files_to_cache_directory_step"
    },
    "update_entry_post_fastq_copy": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.create_db_uuid_step.db_uuid",
          "id_type": "db_uuid"
        },
        "UpdateExpression": "SET analysis_status = :analysis_status",
        "ExpressionAttributeValues": {
          ":analysis_status": {
            "S": "CACHE_COPY_COMPLETE"
          }
        }
      },
      "ResultPath": "$.update_entry_post_fastq",
      "Next": "launch_nextflow_object"
    },
    "launch_nextflow_object": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__launch_cttso_nextflow_pipeline__}",
        "Payload": {
          "project_id.$": "$.workflow_inputs.project_id",
          "user_reference.$": "$.workflow_inputs.user_reference",
          "run_folder_uri.$": "$.workflow_inputs.cache_uri",
          "samplesheet_uri.$": "$.copy_files_to_cache_directory_step.samplesheet_file_uri",
          "sample_id.$": "$.workflow_inputs.sample_id",
          "analysis_output_uri.$": "$.workflow_inputs.output_uri",
          "technical_tags.$": "$.add_technical_tags_step.technical_tags",
          "user_tags.$": "$.workflow_inputs.user_tags"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.launch_nextflow_object_step",
      "ResultSelector": {
        "analysis_id.$": "$.Payload.analysis_id",
        "analysis_status.$": "$.Payload.analysis_status",
        "analysis_return_payload.$": "$.Payload.analysis_return_payload",
        "analysis_launch_payload.$": "$.Payload.analysis_launch_payload"
      },
      "Next": "update_entry_post_launch"
    },
    "update_entry_post_launch": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id": {
            "S.$": "$.create_db_uuid_step.db_uuid"
          },
          "id_type": "db_uuid"
        },
        "UpdateExpression": "SET analysis_id = :analysis_id, analysis_status = :analysis_status, analysis_return_payload = :analysis_return_payload, analysis_launch_payload = :analysis_launch_payload",
        "ExpressionAttributeValues": {
          ":analysis_id": {
            "S.$": "$.launch_nextflow_object_step.analysis_id"
          },
          ":analysis_status": {
            "S.$": "$.launch_nextflow_object_step.analysis_status"
          },
          ":analysis_return_payload": {
            "S.$": "States.JsonToString($.launch_nextflow_object_step.analysis_return_payload)"
          },
          ":analysis_launch_payload": {
            "S.$": "States.JsonToString($.launch_nextflow_object_step.analysis_launch_payload)"
          }
        }
      },
      "ResultPath": "$.update_entry_post_launch_step",
      "Next": "add_icav2_partition_entry"
    },
    "add_icav2_partition_entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Item": {
          "id.$": "$.launch_nextflow_object_step.analysis_id",
          "id_type": "icav2_analysis_id",
          "db_uuid": {
            "S.$": "$.create_db_uuid_step.db_uuid"
          }
        }
      },
      "ResultPath": "$.dynamo_db_put_item_step",
      "Next": "get_database_entry"
    },
    "get_database_entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.create_db_uuid_step.db_uuid",
          "id_type": "db_uuid"
        }
      },
      "Next": "put_launch_event",
      "ResultPath": "$.database_event_data",
      "ResultSelector": {
        "portal_run_id.$": "$.Item.portal_run_id.S",
        "analysis_id.$": "$.Item.analysis_id.S",
        "analysis_launch_payload.$": "$.Item.analysis_launch_payload.S",
        "analysis_status": "$.Item.analysis_status.S",
        "analysis_return_payload": "$.Item.analysis_return_payload.S",
        "state_machine_execution_arn": "$.Item.state_machine_execution_arn.S"
      }
    },
    "put_launch_event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
      "Parameters": {
        "Entries": [
          {
            "Detail.$": "$.database_event_data",
            "DetailType": "ctTSOv2StateChange",
            "EventBusName": "${__eventbus_name__}",
            "Source": "orcabus.cttso_v2",
            "Resources": []
          }
        ]
      },
      "End": true
    }
  }
}