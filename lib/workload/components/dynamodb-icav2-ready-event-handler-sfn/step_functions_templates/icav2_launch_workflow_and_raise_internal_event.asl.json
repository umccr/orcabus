{
  "Comment": "Move inputs to workflow_inputs",
  "StartAt": "move_inputs",
  "States": {
    "move_inputs": {
      "Type": "Pass",
      "Next": "check_portal_run_id_in_db",
      "Parameters": {
        "workflow_inputs.$": "$"
      },
      "Comment": "Workflow inputs will be dependent on the icav2 end point we are executing"
    },
    "check_portal_run_id_in_db": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id": {
            "S.$": "$.workflow_inputs.portalRunId"
          },
          "id_type": {
            "S": "portal_run_id"
          }
        }
      },
      "Next": "is_portal_run_id_in_db",
      "ResultPath": "$.portal_run_id_in_db_step",
      "ResultSelector": {
        "db_response.$": "$"
      }
    },
    "is_portal_run_id_in_db": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.portal_run_id_in_db_step.db_response.Item",
            "IsPresent": true
          },
          "Next": "generate_db_uuid"
        }
      ],
      "Default": "Get PortalRunId DataBase Entry"
    },
    "generate_db_uuid": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__generate_db_uuid__}",
        "Payload": {}
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultSelector": {
        "db_uuid.$": "$.Payload.db_uuid"
      },
      "ResultPath": "$.create_db_uuid_step",
      "Next": "add_technical_tags"
    },
    "add_technical_tags": {
      "Type": "Pass",
      "Parameters": {
        "technical_tags": {
          "portal_run_id.$": "$.workflow_inputs.portalRunId",
          "step_functions_execution_arn.$": "$$.Execution.Id"
        }
      },
      "ResultPath": "$.add_technical_tags_step",
      "Next": "Add items to database"
    },
    "Add items to database": {
      "Type": "Parallel",
      "Next": "Wait 1 Second (pre-input-generation)",
      "Branches": [
        {
          "StartAt": "initialise_db_item",
          "States": {
            "initialise_db_item": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Item": {
                  "id.$": "$.create_db_uuid_step.db_uuid",
                  "id_type": "db_uuid",
                  "portal_run_id": {
                    "S.$": "$.workflow_inputs.portalRunId"
                  },
                  "launch_event_payload": {
                    "S.$": "States.JsonToString($.workflow_inputs.payload)"
                  },
                  "state_machine_execution_arn": {
                    "S.$": "$$.Execution.Id"
                  },
                  "analysis_status": {
                    "S": "PRE_LAUNCH"
                  },
                  "analysis_id": {
                    "S": ""
                  },
                  "analysis_return_payload": {
                    "S": ""
                  },
                  "analysis_launch_payload": {
                    "S": ""
                  },
                  "analysis_technical_tags": {
                    "S.$": "States.JsonToString($.add_technical_tags_step.technical_tags)"
                  }
                }
              },
              "ResultPath": "$.dynamo_db_put_item_step",
              "End": true
            }
          }
        },
        {
          "StartAt": "put_portal_partition_key_item",
          "States": {
            "put_portal_partition_key_item": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Item": {
                  "id.$": "$.workflow_inputs.portalRunId",
                  "id_type": "portal_run_id",
                  "db_uuid": {
                    "S.$": "$.create_db_uuid_step.db_uuid"
                  },
                  "analysis_status": {
                    "S": "PRE_LAUNCH"
                  }
                }
              },
              "ResultPath": "$.dynamo_db_put_item_step",
              "End": true
            }
          }
        },
        {
          "StartAt": "log_event_item",
          "States": {
            "log_event_item": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:putItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Item": {
                  "id.$": "$.create_db_uuid_step.db_uuid",
                  "id_type": "event_logger",
                  "db_uuid": {
                    "S.$": "$.create_db_uuid_step.db_uuid"
                  },
                  "event_timestamp_list": {
                    "L": [
                      {
                        "S.$": "$.workflow_inputs.timestamp"
                      }
                    ]
                  },
                  "analysis_status_list": {
                    "L": [
                      {
                        "S": "PRE_LAUNCH"
                      }
                    ]
                  }
                }
              },
              "ResultPath": "$.dynamo_db_put_item_step",
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.add_items_in_parallel_step"
    },
    "Wait 1 Second (pre-input-generation)": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Set Input Json Sfn"
    },
    "Set Input Json Sfn": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${__set_input_json_state_machine_arn__}",
        "Input": {
          "db_uuid.$": "$.create_db_uuid_step.db_uuid"
        }
      },
      "Next": "Wait 1 Second (pre-execution)"
    },
    "Wait 1 Second (pre-execution)": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Launch ICAv2 Workflow"
    },
    "Launch ICAv2 Pipeline Sfn": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${__launch_icav2_pipeline_sfn_arn__}",
        "Input": {
          "db_uuid.$": "$.create_db_uuid_step.db_uuid"
        }
      },
      "Next": "Wait 1 Second (Post-execution)"
    },
    "Wait 1 Second (Post-execution)": {
      "Type": "Wait",
      "Seconds": 1,
      "Comment": "Wait for databases to sync before continuing",
      "End": true
    },
    "Get PortalRunId DataBase Entry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.workflow_inputs.portalRunId",
          "id_type": "portal_run_id"
        }
      },
      "Next": "DynamoDB GetItem",
      "ResultPath": "$.database_event_data",
      "ResultSelector": {
        "db_uuid.$": "$.Item.db_uuid.S"
      }
    },
    "DynamoDB GetItem": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "MyDynamoDBTable",
        "Key": {
          "id.$": "$.database_event_data.db_uuid",
          "id_type": "db_uuid"
        }
      },
      "Next": "put_launch_event",
      "ResultSelector": {
        "portalRunId.$": "$.Item.portal_run_id.S",
        "timestamp.$": "$$.State.EnteredTime",
        "status": "$.Item.analysis_status.S",
        "workflowType": "${__workflow_type__}",
        "workflowVersion": "${__workflow_version__}",
        "payload": {
          "refId": null,
          "analysisLaunchPayload.$": "$.Item.analysis_launch_payload.S",
          "analysisReturnPayload": "$.Item.analysis_return_payload.S",
          "stateMachineExecutionArn": "$.Item.state_machine_execution_arn.S",
          "analysisId.$": "$.Item.analysis_id.S"
        },
        "serviceVersion": "${__service_version__}"
      },
      "ResultPath": "$.database_event_data"
    },
    "put_launch_event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail.$": "$.database_event_data",
            "DetailType": "${__detail_type__}",
            "EventBusName": "${__eventbus_name__}",
            "Source": "${__event_source__}",
            "Resources": []
          }
        ]
      },
      "End": true
    }
  }
}
