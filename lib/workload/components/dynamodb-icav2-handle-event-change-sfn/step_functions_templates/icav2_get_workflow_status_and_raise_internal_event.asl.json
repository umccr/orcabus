{
  "Comment": "Handle icav2 state change",
  "StartAt": "Move event detail",
  "States": {
    "Move event detail": {
      "Type": "Pass",
      "Next": "DynamoDB Get UUID from ICAv2 Analysis ID",
      "Parameters": {
        "event_detail.$": "$"
      }
    },
    "DynamoDB Get UUID from ICAv2 Analysis ID": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.event_detail.payload.id",
          "id_type": "icav2_analysis_id"
        }
      },
      "Next": "Check Analysis ID in DataBase",
      "ResultPath": "$.get_analysis_id_in_db_step",
      "ResultSelector": {
        "db_response.$": "$"
      }
    },
    "Check Analysis ID in DataBase": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.get_analysis_id_in_db_step.db_response.Item",
            "IsPresent": true
          },
          "Next": "Success"
        }
      ],
      "Default": "Add items to database"
    },
    "Add items to database": {
      "Type": "Parallel",
      "Next": "Wait 1 Second",
      "Branches": [
        {
          "StartAt": "DynamoDB Update Status",
          "States": {
            "DynamoDB Update Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.get_analysis_id_in_db_step.db_response.Item.db_uuid.S",
                  "id_type": "db_uuid"
                },
                "UpdateExpression": "SET analysis_status = :analysis_status",
                "ExpressionAttributeValues": {
                  ":analysis_status": {
                    "S.$": "$.event_detail.payload.status"
                  }
                }
              },
              "ResultPath": "$.update_analysis_id_in_db_step",
              "End": true
            }
          }
        },
        {
          "StartAt": "DynamoDB Record event",
          "States": {
            "DynamoDB Record event": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.get_analysis_id_in_db_step.db_response.Item.db_uuid.S",
                  "id_type": "event_logger"
                },
                "UpdateExpression": "SET analysis_status_list = list_append(analysis_status_list, :status), event_timestamp_list = list_append(event_timestamp_list, :event_timestamp)",
                "ExpressionAttributeValues": {
                  ":status": {
                    "L": [
                      {
                        "S.$": "$.event_detail.payload.status"
                      }
                    ]
                  },
                  ":event_timestamp": {
                    "L": [
                      {
                        "S.$": "$.event_detail.timestamp"
                      }
                    ]
                  }
                }
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.add_items_to_db"
    },
    "Wait 1 Second": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "DynamoDB Get UUID Row"
    },
    "DynamoDB Get UUID Row": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_analysis_id_in_db_step.db_response.Item.db_uuid.S",
          "id_type": "db_uuid"
        }
      },
      "Next": "PutEvent",
      "ResultPath": "$.get_updated_analysis_id_in_db_step",
      "ResultSelector": {
        "portalRunId.$": "$.Item.portal_run_id.S",
        "timestamp.$": "$$.State.EnteredTime",
        "status.$": "$.Item.analysis_status.S",
        "workflowType": "${__workflow_type__}",
        "workflowVersion": "${__workflow_version__}",
        "payload": {
          "refId": null,
          "analysisLaunchPayload.$": "$.Item.analysis_launch_payload.S",
          "analysisReturnPayload.$": "$.Item.analysis_return_payload.S",
          "stateMachineExecutionArn.$": "$.Item.state_machine_execution_arn.S",
          "analysisId.$": "$.Item.analysis_id.S"
        },
        "serviceVersion": "${__service_version__}"
      }
    },
    "PutEvent": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail.$": "$.get_updated_analysis_id_in_db_step",
            "DetailType": "workflowRunStateChange",
            "EventBusName": "${__eventbus_name__}",
            "Source": "${__eventsource__}"
          }
        ]
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
