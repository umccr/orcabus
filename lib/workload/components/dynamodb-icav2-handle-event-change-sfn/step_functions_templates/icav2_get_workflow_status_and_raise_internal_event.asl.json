{
  "Comment": "Handle icav2 state change",
  "StartAt": "Move inputs",
  "States": {
    "Move inputs": {
      "Type": "Pass",
      "Parameters": {
        "event_detail.$": "$"
      },
      "Next": "DynamoDB Get UUID from ICAv2 Analysis ID"
    },
    "DynamoDB Get UUID from ICAv2 Analysis ID": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.event_detail.payload.id",
          "id_type": "icav2_analysis_id"
        }
      },
      "ResultSelector": {
        "db_response.$": "$"
      },
      "ResultPath": "$.get_analysis_id_in_db_step",
      "Next": "Check Analysis ID in DataBase"
    },
    "Check Analysis ID in DataBase": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.get_analysis_id_in_db_step.db_response.Item",
            "IsPresent": true
          },
          "Next": "Success"
        }
      ],
      "Default": "Add items to database and update output json"
    },
    "Add items to database and update output json": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "DynamoDB Update Status",
          "States": {
            "DynamoDB Update Status": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.get_analysis_id_in_db_step.db_response.Item.db_uuid.S",
                  "id_type": "db_uuid"
                },
                "UpdateExpression": "SET analysis_status = :analysis_status",
                "ExpressionAttributeValues": {
                  ":analysis_status": {
                    "S.$": "$.event_detail.payload.status"
                  }
                }
              },
              "ResultPath": "$.update_analysis_id_in_db_step",
              "End": true
            }
          }
        },
        {
          "StartAt": "Add status to event logger",
          "States": {
            "Add status to event logger": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.get_analysis_id_in_db_step.db_response.Item.db_uuid.S",
                  "id_type": "event_logger"
                },
                "UpdateExpression": "SET analysis_status_list = list_append(analysis_status_list, :status), event_timestamp_list = list_append(event_timestamp_list, :event_timestamp)",
                "ExpressionAttributeValues": {
                  ":status": {
                    "L": [
                      {
                        "S.$": "$.event_detail.payload.status"
                      }
                    ]
                  },
                  ":event_timestamp": {
                    "L": [
                      {
                        "S.$": "$.event_detail.timestamp"
                      }
                    ]
                  }
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "status is SUCCEEDED",
          "States": {
            "status is SUCCEEDED": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.event_detail.payload.status",
                  "StringEquals": "SUCCEEDED",
                  "Next": "Get Outputs JSON"
                }
              ],
              "Default": "Pass"
            },
            "Get Outputs JSON": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Parameters": {
                "StateMachineArn": "${__sfn_get_outputs_json__}",
                "Input": {
                  "db_uuid.$": "$.get_analysis_id_in_db_step.db_response.Item.db_uuid.S"
                }
              },
              "Next": "Pass",
              "ResultPath": "$.outputs_collection_sfn_step"
            },
            "Pass": {
              "Type": "Pass",
              "End": true,
              "ResultPath": "$.pass_placeholder"
            }
          }
        }
      ],
      "ResultPath": "$.add_items_to_db",
      "Next": "Wait (database - updates)"
    },
    "Wait (database - updates)": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Get UUID Row For Payload"
    },
    "Get UUID Row For Payload": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_analysis_id_in_db_step.db_response.Item.db_uuid.S",
          "id_type": "db_uuid"
        }
      },
      "ResultSelector": {
        "portalRunId.$": "$.Item.portal_run_id.S",
        "timestamp.$": "$$.State.EnteredTime",
        "status.$": "$.Item.analysis_status.S",
        "workflowName": "${__workflow_type__}",
        "workflowVersion": "${__workflow_version__}",
        "workflowRunName.$": "$.Item.workflow_run_name.S",
        "payload": {
          "version": "${__service_version__}",
          "data": {
            "projectId.$": "$.Item.project_id.S",
            "analysisId.$": "$.Item.analysis_id.S",
            "analysisOutput.$": "$.Item.analysis_output.S"
          }
        }
      },
      "ResultPath": "$.get_updated_analysis_id_in_db_step",
      "Next": "Push Event to Orcabus"
    },
    "Push Event to Orcabus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail.$": "$.get_updated_analysis_id_in_db_step",
            "DetailType": "WorkflowRunStateChange",
            "EventBusName": "${__eventbus_name__}",
            "Source": "${__eventsource__}"
          }
        ]
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}
