{
  "Comment": "A description of my state machine",
  "StartAt": "move inputs",
  "States": {
    "move inputs": {
      "Type": "Pass",
      "Next": "Get reference id from payload",
      "Parameters": {
        "input_event_detail.$": "$"
      }
    },
    "Get reference id from payload": {
      "Type": "Pass",
      "Next": "Is ref id null",
      "Parameters": {
        "reference_id.$": "$.input_event_detail.payload.refId"
      },
      "ResultPath": "$.get_reference_id_step"
    },
    "Is ref id null": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get_reference_id_step.reference_id",
          "IsNull": true,
          "Next": "Generate uuid"
        }
      ],
      "Default": "Get reference Id in database (local)"
    },
    "Generate uuid": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${__generate_uuid_lambda_function_arn__}",
        "Payload": {}
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.get_reference_id_step",
      "ResultSelector": {
        "reference_id.$": "$.Payload.db_uuid"
      },
      "Next": "Get reference Id in database (local)"
    },
    "Get reference Id in database (local)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_reference_id_step.reference_id",
          "id_type": "${__workflow_type_partition_name__}"
        }
      },
      "ResultPath": "$.get_reference_id_in_db_step",
      "Next": "is reference id in database"
    },
    "is reference id in database": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.get_reference_id_in_db_step.Item",
          "IsPresent": true,
          "Next": "Get Item from DataBase (local)"
        }
      ],
      "Default": "Get Workflow Run Engine Parameters"
    },
    "Get Workflow Run Engine Parameters": {
      "Type": "Task",
      "Resource": "arn:aws:states:::states:startExecution.sync:2",
      "Parameters": {
        "StateMachineArn": "${__engine_parameters_maker_state_machine_arn__}",
        "Input": {
          "portal_run_id.$": "$.input_event_detail.payload.portalRunId",
          "workflow_name.$": "$.input_event_detail.payload.workflowName",
          "workflow_version.$": "$.input_event_detail.payload.workflowVersion",
          "event_data_input.$": "$.input_event_detail.payload.data.inputs",
          "ssm_parameters_list": [
            {
              "engine_parameter_key": "outputUri",
              "ssm_name": "${__output_uri_ssm_parameter_name__}"
            },
            {
              "engine_parameter_key": "logs",
              "ssm_name": "${__logs_uri_ssm_parameter_name__}"
            },
            {
              "engine_parameter_key": "cacheUri",
              "ssm_name": "${__cache_uri_ssm_parameter_name__}"
            },
            {
              "engine_parameter_key": "projectId",
              "ssm_name": "${__project_id_ssm_parameter_name__}"
            }
          ]
        }
      },
      "Next": "Update workflow table database",
      "ResultPath": "$.set_workflow_run_engine_parameters",
      "ResultSelector": {
        "engine_parameters.$": "$.Output.engine_parameters"
      }
    },
    "Update workflow table database": {
      "Type": "Parallel",
      "Next": "Wait 1 Second (post event detail output update)",
      "Branches": [
        {
          "StartAt": "Initialise Event Data Item with Inputs Engine Parameters",
          "States": {
            "Initialise Event Data Item with Inputs Engine Parameters": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.get_reference_id_step.reference_id",
                  "id_type": "${__workflow_type_partition_name__}"
                },
                "UpdateExpression": "SET event_data_inputs = :event_data_inputs, workflow_run_name = :workflow_run_name, portal_run_id = :portal_run_id, event_data_engine_parameters = :event_data_engine_parameters",
                "ExpressionAttributeValues": {
                  ":portal_run_id": {
                    "S.$": "$.input_event_detail.payload.portalRunId"
                  },
                  ":workflow_run_name": {
                    "S.$": "$.input_event_detail.payload.workflowRunName"
                  },
                  ":event_data_inputs": {
                    "S.$": "States.JsonToString($.input_event_detail.payload.data.inputs)"
                  },
                  ":event_data_engine_parameters": {
                    "S.$": "States.JsonToString($.set_workflow_run_engine_parameters.engine_parameters)"
                  }
                }
              },
              "ResultPath": null,
              "End": true
            }
          }
        },
        {
          "StartAt": "Update portal_run table",
          "States": {
            "Update portal_run table": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${__table_name__}",
                "Key": {
                  "id.$": "$.input_event_detail.payload.portalRunId",
                  "id_type": "${__portal_run_partition_name__}"
                },
                "UpdateExpression": "SET status = :status",
                "ExpressionAttributeValues": {
                  ":status": {
                    "S": "ready"
                  }
                }
              },
              "ResultPath": null,
              "End": true
            }
          }
        }
      ]
    },
    "Wait 1 Second (post event detail output update)": {
      "Type": "Wait",
      "Seconds": 1,
      "Next": "Get Item from DataBase (local)"
    },
    "Get Item from DataBase (local)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "${__table_name__}",
        "Key": {
          "id.$": "$.get_reference_id_step.reference_id",
          "id_type": "${__workflow_type_partition_name__}"
        }
      },
      "Next": "EventBridge PutEvents",
      "ResultPath": "$.get_event_data_output_step",
      "ResultSelector": {
        "event_data_output.$": "States.StringToJson($.Item.event_data_output.S)"
      }
    },
    "EventBridge PutEvents": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Source": "${__event_output_source__}",
            "EventBusName": "${__event_bus_name__}",
            "DetailType": "${__detail_type__}",
            "Detail": {
              "portalRunId.$": "$.input_event_detail.payload.portalRunId",
              "timestamp.$": "$$.State.EnteredTime",
              "status": "ready",
              "workflowName": "$.input_event_detail.payload.workflowName",
              "workflowVersion": "$.input_event_detail.payload.workflowVersion",
              "workflowRunName.$": "$.input_event_detail.payload.workflowRunName",
              "payload": {
                "refId": null,
                "version": "${__payload_version__}",
                "data": {
                  "inputs": "$.get_event_data_output_step.event_data_inputs",
                  "engineParameters": "$.get_event_data_output_step.engine_parameters",
                  "tags": "$.input_event_detail.payload.data.tags"
                }
              }
            }
          }
        ]
      },
      "End": true
    }
  }
}
